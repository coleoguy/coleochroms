}
ass.distmat <- round(1-(distmat/max(distmat)),digits=3)
dis.distmat <- (distmat/max(distmat))
chosen.parents <- matrix(NA, 0, 2)
colnames(chosen.parents) <- c("popA","popB")
# assortive mating
if(type== "assort"){
par.index <- sample(1:length(ass.distmat), size=parents, prob=as.vector(ass.distmat)^100)
counter <- 1
for(i in 1:ncol(ass.distmat)){
for(j in 1:nrow(ass.distmat)){
if(counter %in% par.index){
chosen.parents <- rbind(chosen.parents, c(j, i))
}
counter <- counter + 1
}
}
return(chosen.parents)
}
}
foo <- getParents(mpheno, parents=500)
plot(density(mpheno[,2]), xlim=c(min(mpheno),max(mpheno)))
lines(density(mpheno[foo[,1],2]),col="darkgray")
lines(density(mpheno[,1]),col="red")
lines(density(mpheno[foo[,1],1]),col="pink")
mpheno <- round(matrix(c(rnorm(500, mean=10, sd=.5),
rnorm(500,mean=6, sd=.5)), 500,2),digits=3)
colnames(mpheno) <- c("popA","popB")
parents <- 5
type <- "assort"
getParents <- function(mpheno, parents=50, type="assort"){
distmat <- matrix(NA, nrow=nrow(mpheno), ncol=nrow(mpheno))
for(i in 1:nrow(mpheno)){ # rows of mpheno 1
for(j in 1:nrow(mpheno)){# rows of mpheno 2
distmat[i, j] <- abs(mpheno[i,1] - mpheno[j,2])
}
}
ass.distmat <- round(1-(distmat/max(distmat)),digits=3)
dis.distmat <- (distmat/max(distmat))
chosen.parents <- matrix(NA, 0, 2)
colnames(chosen.parents) <- c("popA","popB")
# assortive mating
if(type== "assort"){
par.index <- sample(1:length(ass.distmat), size=parents, prob=as.vector(ass.distmat)^100)
counter <- 1
for(i in 1:ncol(ass.distmat)){
for(j in 1:nrow(ass.distmat)){
if(counter %in% par.index){
chosen.parents <- rbind(chosen.parents, c(j, i))
}
counter <- counter + 1
}
}
return(chosen.parents)
}
}
foo <- getParents(mpheno, parents=500)
plot(density(mpheno[,2]), xlim=c(min(mpheno),max(mpheno)))
lines(density(mpheno[foo[,1],2]),col="darkgray")
lines(density(mpheno[,1]),col="red")
lines(density(mpheno[foo[,1],1]),col="pink")
mpheno <- round(matrix(c(rnorm(500, mean=10, sd=.5),
rnorm(500,mean=6, sd=.5)), 500,2),digits=3)
colnames(mpheno) <- c("popA","popB")
parents <- 5
type <- "assort"
getParents <- function(mpheno, parents=50, type="assort"){
distmat <- matrix(NA, nrow=nrow(mpheno), ncol=nrow(mpheno))
for(i in 1:nrow(mpheno)){ # rows of mpheno 1
for(j in 1:nrow(mpheno)){# rows of mpheno 2
distmat[i, j] <- abs(mpheno[i,1] - mpheno[j,2])
}
}
ass.distmat <- round(1-(distmat/max(distmat)),digits=3)
dis.distmat <- (distmat/max(distmat))
chosen.parents <- matrix(NA, 0, 2)
colnames(chosen.parents) <- c("popA","popB")
# assortive mating
if(type== "assort"){
par.index <- sample(1:length(ass.distmat), size=parents, prob=as.vector(ass.distmat)^100)
counter <- 1
for(i in 1:ncol(ass.distmat)){
for(j in 1:nrow(ass.distmat)){
if(counter %in% par.index){
chosen.parents <- rbind(chosen.parents, c(j, i))
}
counter <- counter + 1
}
}
return(chosen.parents)
}
}
foo <- getParents(mpheno, parents=500)
plot(density(mpheno[,2]), xlim=c(min(mpheno),max(mpheno)))
lines(density(mpheno[foo[,1],2]),col="darkgray")
lines(density(mpheno[,1]),col="red")
lines(density(mpheno[foo[,1],1]),col="pink")
# population size
N <- 1000
# number of generations
gen <- 1000
# selection coefficient
s <- .05
t <- .05
# dominance factor allele 0
h_s <- .5
h_t <- .5
# mutation from 0 -> 1 at locus g
mutg <- 10^-5
# mutation joining sex chromosome and autosome
mutfuse <- 10^-5
# this defines our fitness function for locus SA
# females 00, 01, 11
# males   00, 01, 11
fit_sa <- c(1,   1-h_s*s, 1-s,
1-s, 1-h_s*s, 1)
# this defines our fitness function for locus G
fit_g  <- c(1,   1-h_t*t, 1-t)
3*3*2*2
# get an initial population
genotypes <- c('G00SA00SDXXF0', 'G01SA00SDXXF0', 'G11SA00SDXXF0',
'G00SA01SDXXF0', 'G01SA01SDXXF0', 'G11SA01SDXXF0',
'G00SA11SDXXF0', 'G01SA11SDXXF0', 'G11SA11SDXXF0',
'G00SA00SDXYF0', 'G01SA00SDXYF0', 'G11SA00SDXYF0',
'G00SA01SDXYF0', 'G01SA01SDXYF0', 'G11SA01SDXYF0',
'G00SA11SDXYF0', 'G01SA11SDXYF0', 'G11SA11SDXYF0',
'G00SA00SDXXF1', 'G01SA00SDXXF1', 'G11SA00SDXXF1',
'G00SA01SDXXF1', 'G01SA01SDXXF1', 'G11SA01SDXXF1',
'G00SA11SDXXF1', 'G01SA11SDXXF1', 'G11SA11SDXXF1',
'G00SA00SDXYF1', 'G01SA00SDXYF1', 'G11SA00SDXYF1',
'G00SA01SDXYF1', 'G01SA01SDXYF1', 'G11SA01SDXYF1',
'G00SA11SDXYF1', 'G01SA11SDXYF1', 'G11SA11SDXYF1')
pop <- rep(0, 36)
names(pop) <- genotypes
pop
c(0.125, 0.25, 0.125, 0.125, 0.25, 0.125) * N
pop
pop[4]
c(0.125, 0.25, 0.125, 0.125, 0.25, 0.125) * N
pop[c(1, 4, 7, 10, 13, 16)] <- c(0.125, 0.25, 0.125, 0.125, 0.25, 0.125) * N
pop
runif(min=0, max=1, n=1000)
runif(min=0, max=1, n=1000)<10^-4
sum(runif(min=0, max=1, n=1000)<10^-4)
sum(runif(min=0, max=1, n=1000)<10^-4)
sum(runif(min=0, max=1, n=1000)<10^-4)
sum(runif(min=0, max=1, n=1000)<10^-4)
sum(runif(min=0, max=1, n=1000)<10^-4)
sum(runif(min=0, max=1, n=1000)<10^-4)
sum(runif(min=0, max=1, n=1000)<10^-4)
sum(runif(min=0, max=1, n=1000)<10^-4)
sum(runif(min=0, max=1, n=1000)<10^-3)
sum(runif(min=0, max=1, n=1000)<10^-3)
sum(runif(min=0, max=1, n=1000)<10^-3)
sum(runif(min=0, max=1, n=1000)<10^-3)
sum(runif(min=0, max=1, n=1000)<10^-3)
muts <- c()
for(i in 1:1000){
muts[i] <- sum(runif(min=0, max=1, n=1000)<10^-3)
}
hist(muts)
muts <- c()
for(i in 1:10000){
muts[i] <- sum(runif(min=0, max=1, n=1000)<10^-3)
}
hist(muts)
plot(density(muts))
plot(density(rpois(n=10000, lambda=1)))
rpois(n=1, lambda=1)
rpois(n=1, lambda=1)
rpois(n=1, lambda=1)
rpois(n=1, lambda=1)
rpois(n=1, lambda=1)
rpois(n=1, lambda=1)
rpois(n=1, lambda=1)
rpois(n=1, lambda=1)
rpois(n=1, lambda=1)
rpois(n=1, lambda=1)
rpois(n=1, lambda=1)
N/10^-3
N*10^-3
pop
shiny::runApp('Desktop/diptera/All Diptera')
setwd("~/Desktop/Dropbox/gitrepos/amphib.database")
shiny::runApp()
setwd("~/Desktop/Dropbox/projects/SPB-genome/spb-screening")
library(seqinr)
canu <- read.fasta("polished_genome.fa")
canu <- read.fasta("canu-spb-nov28.fa")
attributes(canu)
foo <- canu[[1]]
length(foo)
cont.lengths <- vector(length=length(canu))
for(i in 1:length(canu)){
print(i)
cont.lengths[i] <- length(canu[[i]])
}
max(cont.lengths)
sum(cont.lengths)
sort(cont.lengths)
sort(cont.lengths, ascending=F)
sort(cont.lengths, descending=F)
sort(cont.lengths, descending=T)
help(sort)
sort(cont.lengths, decreasing =T)
cont.lengths <- sort(cont.lengths, decreasing=T)
cont.lengths <- sort(cont.lengths, decreasing=T)
ass.size <- sum(cont.lengths)
assm.size <- sum(cont.lengths)
result.tab <- matrix(, 7, 2)
colnames(result.tab) <- c("stat", "value")
row.names(result.tab) <- c("Estimated genome size",
"Assembly length",
"Fragments",
"Largest fragment",
"N90",
"N50",
"sum30N")
View(result.tab)
result.tab <- as.data.frame(matrix(, 7, 2))
colnames(result.tab) <- c("stat", "value")
results.tab$stat <- c("Estimated genome size",
"Assembly length",
"Fragments",
"Largest fragment",
"N90",
"N50",
"sum30N")
result.tab <- as.data.frame(matrix(, 7, 2))
colnames(result.tab) <- c("stat", "value")
result.tab$stat <- c("Estimated genome size",
"Assembly length",
"Fragments",
"Largest fragment",
"N90",
"N50",
"sum30N")
View(result.tab)
result.tab$stat
cum(cont.lengths)*.5
assm.file <- "canu-spb-nov28.fa"
est.size <- 200
library(seqinr)
result.tab <- as.data.frame(matrix(, 7, 2))
colnames(result.tab) <- c("stat", "value")
result.tab$stat <- c("Estimated genome size",
"Assembly length",
"Fragments",
"Largest fragment",
"N90",
"N50",
"sum30N")
assm <- read.fasta(assm.file)
cont.lengths <- vector(length=length(assm))
for(i in 1:length(assm)){
print(i)
cont.lengths[i] <- length(assm[[i]])
}
cont.lengths <- sort(cont.lengths, decreasing=T)
result.tab$value[1] <- est.size
result.tab$value[2] <- sum(cont.lengths)
result.tab$value[3] <- length(assm)
result.tab$value[4] <- max(cont.lengths)
View(result.tab)
result.tab$value[2] <- sum(cont.lengths)/1000000
result.tab$value[3] <- length(assm)
result.tab$value[4] <- max(cont.lengths)/1000000
View(result.tab)
result.tab$value[1] <- est.size
result.tab$value[2] <- round(sum(cont.lengths)/1000000, digits = 2)
result.tab$value[3] <- length(assm)
result.tab$value[4] <- round(max(cont.lengths)/1000000, digits = 2)
View(result.tab)
prop <- c()
for(i in 1:length(assm)){
prop[i] <- cont.lengths[i]/sum(cont.lengths)
}
for(i in 1:length(assm)){
prop[i] <- sum(cont.lengths[1:i])/sum(cont.lengths)
}
prop >=.5
min(prop >=.5)
which(prop >=.5)
min(which(prop >=.5))
cont.lengths[min(which(prop >=.5))]
cont.lengths <- sort(cont.lengths, decreasing=T)
result.tab$value[1] <- est.size
result.tab$value[2] <- round(sum(cont.lengths)/1000000, digits = 2)
result.tab$value[3] <- length(assm)
result.tab$value[4] <- round(max(cont.lengths)/1000000, digits = 2)
prop <- c()
for(i in 1:length(assm)){
prop[i] <- sum(cont.lengths[1:i])/sum(cont.lengths)
}
result.tab$value[5] <- cont.lengths[min(which(prop >=.5))]
result.tab$value[6] <- cont.lengths[min(which(prop >=.9))]
result.tab$value[7] <- sum(cont.lengths[1:30])
View(result.tab)
result.tab$value[1] <- est.size
result.tab$value[2] <- round(sum(cont.lengths)/1000000, digits = 2)
result.tab$value[3] <- length(assm)
result.tab$value[4] <- round(max(cont.lengths)/1000000, digits = 2)
prop <- c()
for(i in 1:length(assm)){
prop[i] <- sum(cont.lengths[1:i])/sum(cont.lengths)
}
result.tab$value[5] <- round(cont.lengths[min(which(prop >=.5))]/1000000, digits = 2)
result.tab$value[6] <- round(cont.lengths[min(which(prop >=.9))]/1000000, digits = 2)
result.tab$value[7] <- round(sum(cont.lengths[1:30])/1000000, digits = 2)
View(result.tab)
for(i in 1:length(assm)){
print(i)
cont.lengths[i] <- length(assm[[i]])
}
cont.lengths <- sort(cont.lengths, decreasing=T)
result.tab$value[1] <- est.size
result.tab$value[2] <- round(sum(cont.lengths)/1000000, digits = 2)
result.tab$value[3] <- length(assm)
result.tab$value[4] <- round(max(cont.lengths)/1000000, digits = 2)
prop <- c()
for(i in 1:length(assm)){
prop[i] <- sum(cont.lengths[1:i])/sum(cont.lengths)
}
result.tab$value[5] <- round(cont.lengths[min(which(prop >=.5))]/1000000, digits = 2)
result.tab$value[6] <- round(cont.lengths[min(which(prop >=.9))]/1000000, digits = 2)
result.tab$value[7] <- round(sum(cont.lengths[1:30])/1000000, digits = 2)
View(result.tab)
View(result.tab)
result.tab$value[5] <- round(cont.lengths[min(which(prop <=.5))]/1000000, digits = 2)
result.tab$value[6] <- round(cont.lengths[min(which(prop <=.9))]/1000000, digits = 2)
View(result.tab)
prop
min(which(prop <=.5))
which(prop <=.5)
prop <- c()
for(i in 1:length(assm)){
prop[i] <- sum(cont.lengths[1:i])/sum(cont.lengths)
}
prop <=.5
min(which(prop >=.9))
min(which(prop >=.5))
prop
min(which(prop >=.5))
cont.lengths[min(which(prop >=.5))]/1000000
cont.lengths[min(which(prop >=.9))]/1000000
View(result.tab)
result.tab <- as.data.frame(matrix(, 7, 2))
colnames(result.tab) <- c("stat", "value")
result.tab$stat <- c("Estimated genome size",
"Assembly length",
"Fragments",
"Largest fragment",
"N90",
"N50",
"sum30N")
assm <- read.fasta(assm.file)
cont.lengths <- vector(length=length(assm))
for(i in 1:length(assm)){
print(i)
cont.lengths[i] <- length(assm[[i]])
}
cont.lengths <- sort(cont.lengths, decreasing=T)
result.tab$value[1] <- est.size
result.tab$value[2] <- round(sum(cont.lengths)/1000000, digits = 2)
result.tab$value[3] <- length(assm)
result.tab$value[4] <- round(max(cont.lengths)/1000000, digits = 2)
prop <- c()
for(i in 1:length(assm)){
prop[i] <- sum(cont.lengths[1:i])/sum(cont.lengths)
}
result.tab$value[5] <- round(cont.lengths[min(which(prop >=.9))]/1000000, digits = 2)
result.tab$value[6] <- round(cont.lengths[min(which(prop >=.5))]/1000000, digits = 2)
result.tab$value[7] <- round(sum(cont.lengths[1:30])/1000000, digits = 2)
View(result.tab)
assm.file <- "flye-spb-female-assembly.fasta"
est.size <- 200
library(seqinr)
result.tab <- as.data.frame(matrix(, 7, 2))
colnames(result.tab) <- c("stat", "value")
result.tab$stat <- c("Estimated genome size",
"Assembly length",
"Fragments",
"Largest fragment",
"N90",
"N50",
"sum30N")
assm <- read.fasta(assm.file)
cont.lengths <- vector(length=length(assm))
for(i in 1:length(assm)){
print(i)
cont.lengths[i] <- length(assm[[i]])
}
cont.lengths <- sort(cont.lengths, decreasing=T)
result.tab$value[1] <- est.size
result.tab$value[2] <- round(sum(cont.lengths)/1000000, digits = 2)
result.tab$value[3] <- length(assm)
result.tab$value[4] <- round(max(cont.lengths)/1000000, digits = 2)
prop <- c()
for(i in 1:length(assm)){
prop[i] <- sum(cont.lengths[1:i])/sum(cont.lengths)
}
result.tab$value[5] <- round(cont.lengths[min(which(prop >=.9))]/1000000, digits = 2)
result.tab$value[6] <- round(cont.lengths[min(which(prop >=.5))]/1000000, digits = 2)
result.tab$value[7] <- round(sum(cont.lengths[1:30])/1000000, digits = 2)
View(result.tab)
genome.stats <- function(assm.file, est.size){
result.tab <- as.data.frame(matrix(, 7, 2))
colnames(result.tab) <- c("stat", "value")
result.tab$stat <- c("Estimated genome size",
"Assembly length",
"Fragments",
"Largest fragment",
"N90",
"N50",
"sum30N")
assm <- read.fasta(assm.file)
cont.lengths <- vector(length=length(assm))
for(i in 1:length(assm)){
print(i)
cont.lengths[i] <- length(assm[[i]])
}
cont.lengths <- sort(cont.lengths, decreasing=T)
result.tab$value[1] <- est.size
result.tab$value[2] <- round(sum(cont.lengths)/1000000, digits = 2)
result.tab$value[3] <- length(assm)
result.tab$value[4] <- round(max(cont.lengths)/1000000, digits = 2)
prop <- c()
for(i in 1:length(assm)){
prop[i] <- sum(cont.lengths[1:i])/sum(cont.lengths)
}
result.tab$value[5] <- round(cont.lengths[min(which(prop >=.9))]/1000000, digits = 2)
result.tab$value[6] <- round(cont.lengths[min(which(prop >=.5))]/1000000, digits = 2)
result.tab$value[7] <- round(sum(cont.lengths[1:30])/1000000, digits = 2)
final.results <- list()
final.results[[1]] <- result.tab
final.resutls[[2]] <- cont.lengths
return(final.results)
}
library(seqinr)
flye <- genome.stats(assm.file = "flye-spb-female-assembly.fasta", est.size=200)
genome.stats <- function(assm.file, est.size){
result.tab <- as.data.frame(matrix(, 7, 2))
colnames(result.tab) <- c("stat", "value")
result.tab$stat <- c("Estimated genome size",
"Assembly length",
"Fragments",
"Largest fragment",
"N90",
"N50",
"sum30N")
print("reading assembly")
assm <- read.fasta(assm.file)
cont.lengths <- vector(length=length(assm))
for(i in 1:length(assm)){
cont.lengths[i] <- length(assm[[i]])
}
print("calculating stats")
cont.lengths <- sort(cont.lengths, decreasing=T)
result.tab$value[1] <- est.size
result.tab$value[2] <- round(sum(cont.lengths)/1000000, digits = 2)
result.tab$value[3] <- length(assm)
result.tab$value[4] <- round(max(cont.lengths)/1000000, digits = 2)
prop <- c()
for(i in 1:length(assm)){
prop[i] <- sum(cont.lengths[1:i])/sum(cont.lengths)
}
result.tab$value[5] <- round(cont.lengths[min(which(prop >=.9))]/1000000, digits = 2)
result.tab$value[6] <- round(cont.lengths[min(which(prop >=.5))]/1000000, digits = 2)
result.tab$value[7] <- round(sum(cont.lengths[1:30])/1000000, digits = 2)
final.results <- list()
final.results[[1]] <- result.tab
final.results[[2]] <- cont.lengths
return(final.results)
}
flye <- genome.stats(assm.file = "flye-spb-female-assembly.fasta", est.size=200)
flye[[1]]
plot(flye[[2]])
plot(cumsum(flye[[2]]))
plot(cumsum(flye[[2]]),type="l")
canu <- genome.stats(assm.file = "canu-spb-nov28.fa",
est.size = 200)
plot(cumsum(flye[[2]]) / sum(flye[[2]]),
type = "l",
xlab = "number of fragments",
ylab = "proportion of assembly"
xlim=c(0, max(c(length(flye[[2]]),
length(canu[[2]])))))
plot(cumsum(flye[[2]]) / sum(flye[[2]]),
type = "l",
xlab = "number of fragments",
ylab = "proportion of assembly",
xlim=c(0, max(c(length(flye[[2]]),
length(canu[[2]])))))
lines(cumsum(canu[[2]]) / sum(canu[[2]]), col="red")
foo <- canu[[1]]
View(foo)
knitr::opts_chunk$set(echo = TRUE)
cbind(flye[[1]], canu[[1]][,2])
colnames(stats) <- c("statistic", "Flye", "CANU")
stats <- cbind(flye[[1]], canu[[1]][,2])
colnames(stats) <- c("statistic", "Flye", "CANU")
stats
View(foo)
# print the table
kable(stats)
# print the table
library(knitr)
kable(stats)
library(ape)
setwd("~/Desktop/Dropbox/projects/coleo.chrom.num/data.analysis/data/genus.data.trees/Calathus")
tree <- read.tree("Calathus1.tree")
plot(tree, cex=.5)
