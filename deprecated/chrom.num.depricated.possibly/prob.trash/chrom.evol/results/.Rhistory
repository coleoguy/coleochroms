bs.gain <- as.numeric(gain[,1])
fix(bs.gain)
help(as.numeric)
is.numeric(bs.gain)
is.na(bs.gain)
bs.gain <- bs.gain[!is.na(bs.gain)]
plot(density(bs.gain))
library("boot", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
boot.ci(bs.gain)
help(boot.ci)
foo <- boot(bs.gain, stype="parametric")
foo <- boot(bs.gain, sim="parametric")
foo <- boot(bs.gain, statistic=mean(bs.gain), sim="parametric")
foo <- boot(bs.gain, mean(bs.gain), sim="parametric")
foo <- boot(bs.gain, mean, sim="parametric")
foo <- boot(bs.gain, mean, R=100, sim="parametric")
boot.ci(foo)
foo <- boot(bs.gain, mean, R=10, sim="parametric")
boot.ci(foo)
foo <- boot(bs.gain, sample, R=10, sim="parametric")
boot.ci(foo)
foo <- boot(bs.gain, sample, R=100, sim="parametric")
boot.ci(foo)
foo <- boot(bs.gain, sample, R=1000, sim="parametric")
boot.ci(foo)
plot(density(bs.gain))
bs.gain <- as.numeric(gain[,2])
bs.gain <- bs.gain[!is.na(bs.gain)]
plot(density(bs.gain))
bs.gain <- as.numeric(gain[,3])
bs.gain <- bs.gain[!is.na(bs.gain)]
plot(density(bs.gain))
bs.gain <- as.numeric(gain[,4])
bs.gain <- bs.gain[!is.na(bs.gain)]
plot(density(bs.gain))
bs.gain <- as.numeric(gain[,5])
bs.gain <- bs.gain[!is.na(bs.gain)]
bs.gain <- as.numeric(gain[,5])
bs.gain <- bs.gain[!is.na(bs.gain)]
plot(density(bs.gain))
bs.gain <- as.numeric(gain[,6])
bs.gain <- bs.gain[!is.na(bs.gain)]
plot(density(bs.gain))
boxplot(bs.gain)
help(boxplot)
View(gain)
gain.f <- gain
gain.f <- NA
gain.f <- gain
gain.f[,] <- NA
View(gain.f)
View(gain)
setwd("~/Desktop/Dropbox/papers/chrom.num/data and analysis/analyses/chrom.evol")
setwd("~/Desktop/Dropbox/papers/chrom.num/data and analysis/analyses/chrom.evol")
setwd("~/Desktop/Dropbox/papers/chrom.num/data and analysis/analyses/chrom.evol")
setwd("~/Desktop/Dropbox/papers/chrom.num/data and analysis/analyses/chrom.evol")
groups <- c("Carabidae", "Cerambycidae", "Chrysolina", "Chrysomelidae",
"Timarcha", "Tenebrionidae", "Scarabaeidae", "Ips", "Elateridae",
"Dytiscidae", "Diabrotica", "Dendroctonus", "Curculionidae", "Coccinellidae")
groups <- c("Carabidae", "Cerambycidae", "Chrysolina", "Chrysomelidae",
"Timarcha", "Tenebrionidae", "Scarabaeidae", "Ips", "Elateridae",
"Dytiscidae", "Diabrotica", "Dendroctonus", "Curculionidae", "Coccinellidae",
"Lampyridae", "Pterostichus", "Bembidion", "Cicindela")
groups <- c("Carabidae", "Cerambycidae", "Chrysolina", "Chrysomelidae",
"Timarcha", "Tenebrionidae", "Scarabaeidae", "Ips", "Elateridae",
"Dytiscidae", "Dendroctonus", "Curculionidae", "Coccinellidae",
"Lampyridae", "Pterostichus", "Bembidion", "Cicindela")
data <- matrix(,2,17)
rownames(data) <- c("Gain", "Loss")
colnaems(data) <- groups
colnames(data) <- groups
fix(groups)
View(data)
data
setwd("~/Desktop/Dropbox/papers/chrom.num/data and analysis/analyses/chrom.evol")
groups <- c('Dendroctonus', 'Curculionidae',
'Coccinellidae', 'Lampyridae', 'Pterostichus', 'Bembidion',
'Cicindela', 'Carabidae')
data<- matrix(, 2, 17)
groups <- c('Cerambycidae', 'Chrysolina', 'Chrysomelidae', 'Timarcha',
'Tenebrionidae', 'Dendroctonus', 'Curculionidae','Scarabaeidae',
'Ips', 'Elateridae', 'Dytiscidae', 'Coccinellidae',
'Lampyridae', 'Pterostichus', 'Bembidion', 'Cicindela', 'Carabidae')
rownames(data) <- c("gain", "loss")
data
colnames(data) <- groups
data
help(mean)
setwd("~/Desktop/Dropbox/papers/chrom.num/data and analysis/analyses/chrom.evol")
data<- matrix(, 2, 17)
groups <- c('Cerambycidae', 'Chrysolina', 'Chrysomelidae', 'Timarcha',
'Tenebrionidae', 'Dendroctonus', 'Curculionidae','Scarabaeidae',
'Ips', 'Elateridae', 'Dytiscidae', 'Coccinellidae',
'Lampyridae', 'Pterostichus', 'Bembidion', 'Cicindela', 'Carabidae')
colnames(data) <- groups
rownames(data) <- c("gain", "loss")
for(i in 1:length(groups)){
gain <- loss <- vector()
for(j in 1:20){
data.temp <- readLines(paste(groups[i],
"/result", j, "chromEvol.res",
sep = ""))[c(13,16,17)]
rate <- as.numeric(strsplit(data.temp[1], 'by ')[[1]][2])
gain[j] <- as.numeric(strsplit(data.temp[2], '\t')[[1]][2]) * rate
loss[j] <- as.numeric(strsplit(data.temp[3], '\t')[[1]][2]) * rate
}
data[1,i] <- mean(gain, na.rm=T)
data[2,i] <- mean(loss, na.rm=T)
}
readLines(paste(groups[i],
"/result", j, "chromEvol.res",
sep = ""))[c(13,16,17)]
paste(groups[i],
"/result", j, "chromEvol.res",
sep = "")
readLines(paste(groups[i],
"/result", j, "/chromEvol.res",
sep = ""))[c(13,16,17)]
setwd("~/Desktop/Dropbox/papers/chrom.num/data and analysis/analyses/chrom.evol")
data<- matrix(, 2, 17)
groups <- c('Cerambycidae', 'Chrysolina', 'Chrysomelidae', 'Timarcha',
'Tenebrionidae', 'Dendroctonus', 'Curculionidae','Scarabaeidae',
'Ips', 'Elateridae', 'Dytiscidae', 'Coccinellidae',
'Lampyridae', 'Pterostichus', 'Bembidion', 'Cicindela', 'Carabidae')
colnames(data) <- groups
rownames(data) <- c("gain", "loss")
for(i in 1:length(groups)){
gain <- loss <- vector()
for(j in 1:20){
data.temp <- readLines(paste(groups[i],
"/result", j, "/chromEvol.res",
sep = ""))[c(13,16,17)]
rate <- as.numeric(strsplit(data.temp[1], 'by ')[[1]][2])
gain[j] <- as.numeric(strsplit(data.temp[2], '\t')[[1]][2]) * rate
loss[j] <- as.numeric(strsplit(data.temp[3], '\t')[[1]][2]) * rate
}
data[1,i] <- mean(gain, na.rm=T)
data[2,i] <- mean(loss, na.rm=T)
}
View(data)
write.csv(data, file="MLE.csv")
setwd("~/Desktop/Dropbox/papers/chrom.num/data and analysis/analyses/chrom.evol/results")
groups <- c('Cerambycidae', 'Chrysolina', 'Chrysomelidae', 'Timarcha',
'Tenebrionidae', 'Dendroctonus', 'Curculionidae','Scarabaeidae',
'Ips', 'Elateridae', 'Dytiscidae', 'Coccinellidae',
'Lampyridae', 'Pterostichus', 'Bembidion', 'Cicindela', 'Carabidae')
# OK the goal here is to collect all the data from the boot strap analysis
gain <- matrix(, 100, length(groups))
loss <- matrix(, 100, length(groups))
colnames(gain) <- groups
colnames(loss) <- groups
for(k in 1:length(groups)){ #length(groups)
counter <- 1
print(groups[k])
for(k2 in 1:20){
for(k3 in 1:5){
print(paste(groups[k], ": ", counter))
## Read in the results of the chromevol program
if(file.exists(paste(groups[k], ".", k2, ".", k3, "/chromEvol.res", sep=""))){
data <- readLines(paste(groups[k], ".", k2, ".", k3, "/chromEvol.res", sep=""))[c(13,16,17)]
## now we will extract the parameter estimates and scale as appropriate
## (necessary because Itay's program scales tree to help in optimization
## so we have to multiply the rates to get them back into the tree units)
rate <- as.numeric(strsplit(data[1], 'by ')[[1]][2])
gain[counter, k] <- as.numeric(strsplit(data[2], '\t')[[1]][2]) * rate
loss[counter, k] <- as.numeric(strsplit(data[3], '\t')[[1]][2]) * rate
}else{
gain[counter, k] <- "file.missing"
loss[counter, k] <- "file.missing"
}
counter <- counter + 1
}
}
}
View(loss)
colSD(gain)
colMean(gain)
help(colMeans)
View(gain)
help(SD)
View(gain)
sd(gain[,4])
sd(gain[,4], na.rm=T)
for(i in 1:100){
gain[i,] <- as.numeric(gain[i,])
loss[i,] <- as.numeric(loss[i,])
}
warnings()
View(gain)
sd(gain[,4])
sd(gain[,4], na.rm=T)
View(gain)
View(gain)
for(i in 1:17){
sd.gain <- sd(gain[,i], na.rm=T)
sd.loss <- sd(loss[,i], na.rm=T)
}
MLE <- read.csv("MLE.csv")
getwd()
MLE <- read.csv("../MLE.csv")
View(MLE)
sd.gain[1] <- "sd.gain"
sd.loss[1] <- "sd.loss"
sd.gain <- sd.loss vector()
sd.gain[1] <- "sd.gain"
sd.loss[1] <- "sd.loss"
for(i in 1:17){
sd.gain[i+1] <- sd(gain[,i], na.rm=T)
sd.loss[i+1] <- sd(loss[,i], na.rm=T)
}
sd.gain <- sd.loss <- vector()
sd.gain[1] <- "sd.gain"
sd.loss[1] <- "sd.loss"
for(i in 1:17){
sd.gain[i+1] <- sd(gain[,i], na.rm=T)
sd.loss[i+1] <- sd(loss[,i], na.rm=T)
}
fix(sd.gain)
rbind(MLE, sd.gain, sd.loss)
MLE <- read.csv("../MLE.csv", as.is=T)
rbind(MLE, sd.gain, sd.loss)
MLE
parameters <- rbind(MLE, sd.gain, sd.loss)
View(parameters)
write.csv(parameters, file="params.csv")
write.csv(parameters, file="../params.csv")
setwd("~/Desktop/Dropbox/papers/chrom.num/data and analysis/analyses")
setwd("~/Desktop/Dropbox/papers/chrom.num/data and analysis/analyses")
results <- read.csv("chrom.evol/params.csv")
plot(x=1:18, y=results[1,2:19])
plot(x=1:18, y=results[1,2:19], pch=19, ylim=c(0,1))
plot(x=1:18, y=results[1,2:19], pch=19, ylim=c(0,1.5))
foo <- c(1,1,5,6,7,9,1)
sort(foo)
which(sort(foo))
order(foo)
foo
order(foo)
help(order)
base::order(foo)
sort.list(foo)
foo
foo
foo[order(foo)]
order(results[1,2:19])
res.order <- order(results[1,2:19])+1
fix(res.order)
plot(x=1:18, y=results[1,res.order], pch=19, ylim=c(0,1.5))
help(errbar)
View(results)
1/10*1.96
results[3,2:19]
help(lines)
View(results)
help(rexp)
setwd("~/Desktop/Dropbox/papers/chrom.num/data and analysis/analyses/chrom.evol/results")
groups <- c('Cerambycidae', 'Chrysolina', 'Chrysomelidae', 'Timarcha',
'Tenebrionidae', 'Dendroctonus', 'Curculionidae','Scarabaeidae',
'Ips', 'Elateridae', 'Dytiscidae', 'Coccinellidae',
'Lampyridae', 'Pterostichus', 'Bembidion', 'Cicindela', 'Carabidae')
# OK the goal here is to collect all the data from the boot strap analysis
gain <- matrix(, 100, length(groups))
loss <- matrix(, 100, length(groups))
colnames(gain) <- groups
colnames(loss) <- groups
for(k in 1:length(groups)){ #length(groups)
counter <- 1
print(groups[k])
for(k2 in 1:20){
for(k3 in 1:5){
print(paste(groups[k], ": ", counter))
## Read in the results of the chromevol program
if(file.exists(paste(groups[k], ".", k2, ".", k3, "/chromEvol.res", sep=""))){
data <- readLines(paste(groups[k], ".", k2, ".", k3, "/chromEvol.res", sep=""))[c(13,16,17)]
## now we will extract the parameter estimates and scale as appropriate
## (necessary because Itay's program scales tree to help in optimization
## so we have to multiply the rates to get them back into the tree units)
rate <- as.numeric(strsplit(data[1], 'by ')[[1]][2])
gain[counter, k] <- as.numeric(strsplit(data[2], '\t')[[1]][2]) * rate
loss[counter, k] <- as.numeric(strsplit(data[3], '\t')[[1]][2]) * rate
}else{
gain[counter, k] <- "file.missing"
loss[counter, k] <- "file.missing"
}
counter <- counter + 1
}
}
}
## Lets look at these results
for(i in 1:100){
gain[i,] <- as.numeric(gain[i,])
loss[i,] <- as.numeric(loss[i,])
}
View(gain)
View(gain)
help(quantile)
qunatile(gain[,1], c(.025, .975),na.rm=T)
quantile(gain[,1], c(.025, .975),na.rm=T)
View(gain)
quantile(as.numeric(gain[,1]), c(.025, .975),na.rm=T)
quantile(as.numeric(gain[,1]), c(.025, .975),na.rm=T)[1]
qt.gain.u <- qt.loss.u <- qt.gain.l <- qt.loss.l <- vector()
qt.gain.u[1] <- "qt.gain.u"
qt.loss.u[1] <- "qt.loss.u"
qt.gain.l[1] <- "qt.gain.l"
qt.loss.l[1] <- "qt.loss.l"
for(i in 1:17){
qt.gain.l[i+1] <- quantile(as.numeric(gain[,i]), c(.025, .975),na.rm=T)[1]
qt.gain.u[i+1] <- quantile(as.numeric(gain[,i]), c(.025, .975),na.rm=T)[2]
qt.loss.l[i+1] <- quantile(as.numeric(loss[,i]), c(.025, .975),na.rm=T)[1]
qt.loss.u[i+1] <- quantile(as.numeric(loss[,i]), c(.025, .975),na.rm=T)[2]
}
MLE <- read.csv("../MLE.csv", as.is=T)
parameters <- rbind(MLE, qt.gain.u, qt.gain.l, qt.loss.u, qt.loss.l)
View(parameters)
View(gain)
View(gain)
plot(density(gain[,1]))
plot(density(as.numeric(gain[,1])))
foo <- as.numeric(gain[,1])
fix(foo)
foo <- foo[!is.na(foo)]
plot(density(foo))
foo.col <- rainbow(16)
for(i in 2:17){
foo <- as.numeric(gain[,1])
foo <- foo[!is.na(foo)]
lines(density(foo), col+foo.col)
}
foo <- as.numeric(gain[,1])
foo <- foo[!is.na(foo)]
plot(density(foo))
foo.col <- rainbow(16)
for(i in 2:17){
foo <- as.numeric(gain[,1])
foo <- foo[!is.na(foo)]
lines(density(foo), col=foo.col)
}
foo <- as.numeric(gain[,1])
foo <- foo[!is.na(foo)]
plot(density(foo))
foo.col <- rainbow(16)
for(i in 2:17){
foo <- as.numeric(gain[,i])
foo <- foo[!is.na(foo)]
lines(density(foo), col=foo.col)
}
foo <- as.numeric(gain[,1])
foo <- foo[!is.na(foo)]
plot(density(foo), xlim=c(0,2))
foo.col <- rainbow(16)
for(i in 2:17){
foo <- as.numeric(gain[,i])
foo <- foo[!is.na(foo)]
lines(density(foo), col=foo.col)
}
foo <- as.numeric(gain[,1])
foo <- foo[!is.na(foo)]
plot(density(foo), xlim=c(0,2))
foo.col <- rainbow(16)
for(i in 2:17){
foo <- as.numeric(gain[,i])
foo <- foo[!is.na(foo)]
lines(density(foo), col=foo.col[i])
}
plot(density(foo), xlim=c(0,2), ylim=c(0,15))
foo.col <- rainbow(16)
for(i in 2:17){
foo <- as.numeric(gain[,i])
foo <- foo[!is.na(foo)]
lines(density(foo), col=foo.col[i])
}
N = 100  # the number of iid observations
M = 100 # the number of bootstrap replicates
# we will later investigate the effect of changing N and M
# on the PDF document, the case where N=100, M=2000 is covered in depth
# generate N iid copies of an exponential r.v. with parameter 3
# then calculate the MLE, and use the asymptotic variance formula
my.Test.Data<-rexp(N,3)
mean(my.Test.Data)
#  NOTE: you will get a different answer each time you do this!
#  (why?) come ask me if you are not sure
#	Recall the formula for the MLE is 1/X_bar and that the
#	asymptotic variance is given by ( (lambda)^2 )/n
1/mean(my.Test.Data)
empirical.lambda<-1/mean(my.Test.Data)
#Normal theory quantiles:
CIlow<-empirical.lambda-qnorm(0.975)*empirical.lambda/sqrt(N)
CIhigh<-empirical.lambda+qnorm(0.975)*empirical.lambda/sqrt(N)
#first, initialize a matrix that will receive the values of the
#estimate from each sample
boot.sampling.dist<-matrix(1,M)
#Now create M bootstrap samples and compute the value of the stat for each of them
for (i in 1:M){
boot.sampling.dist[i]<-1/mean(rexp(N,empirical.lambda))
}
#look at the sampling distribution of the stat, according to parametric bootstrap:
windows()
hist(boot.sampling.dist,main="Estimate of sampling distribution of lambda",breaks=50)
2
#find the quantiles of this distribution
my.quantiles<-quantile(boot.sampling.dist,c(.025,0.975))
#calculate the bootstrap confidence interval boundaries
CIbootlow<-2*empirical.lambda-my.quantiles[2]
CIboothigh<-2*empirical.lambda-my.quantiles[1]
fix(CIboothigh)
quantile(boot.sampling.dist,c(.025,0.975))
fix(CIboothigh)
fix(CIbootlow)
N = 100  # the number of iid observations
M = 1000 # the number of bootstrap replicates
# we will later investigate the effect of changing N and M
# on the PDF document, the case where N=100, M=2000 is covered in depth
# generate N iid copies of an exponential r.v. with parameter 3
# then calculate the MLE, and use the asymptotic variance formula
my.Test.Data<-rexp(N,3)
mean(my.Test.Data)
#  NOTE: you will get a different answer each time you do this!
#  (why?) come ask me if you are not sure
#	Recall the formula for the MLE is 1/X_bar and that the
#	asymptotic variance is given by ( (lambda)^2 )/n
1/mean(my.Test.Data)
empirical.lambda<-1/mean(my.Test.Data)
#Normal theory quantiles:
CIlow<-empirical.lambda-qnorm(0.975)*empirical.lambda/sqrt(N)
CIhigh<-empirical.lambda+qnorm(0.975)*empirical.lambda/sqrt(N)
#[2.67, 3.97]
## NOW, BASED ON OUR ESTIMATE, empirical.lambda, GENERATE M BOOTSTRAP REPLICATES
#first, initialize a matrix that will receive the values of the
#estimate from each sample
boot.sampling.dist<-matrix(1,M)
#Now create M bootstrap samples and compute the value of the stat for each of them
for (i in 1:M){
boot.sampling.dist[i]<-1/mean(rexp(N,empirical.lambda))
}
#look at the sampling distribution of the stat, according to parametric bootstrap:
windows()
hist(boot.sampling.dist,main="Estimate of sampling distribution of lambda",breaks=50)
2
#find the quantiles of this distribution
my.quantiles<-quantile(boot.sampling.dist,c(.025,0.975))
#calculate the bootstrap confidence interval boundaries
CIbootlow<-2*empirical.lambda-my.quantiles[2]
CIboothigh<-2*empirical.lambda-my.quantiles[1]
fix(CIboothigh)
fix(CIbootlow)
View(parameters)
final.result <- matrix(0,6,17)
rownames(final.results) <- c("MLE.G", "CIHI.G", "CILOW.G",
"MLE.L", "CIHI.L", "CILOW.L")
final.result <- matrix(0,6,17)
rownames(final.results) <- c("MLE.G", "CIHI.G", "CILOW.G",
"MLE.L", "CIHI.L", "CILOW.L")
rownames(final.result) <- c("MLE.G", "CIHI.G", "CILOW.G",
"MLE.L", "CIHI.L", "CILOW.L")
final.result
View(MLE)
final.result[1,] <- MLE[1,2:18]
final.result[4,] <- MLE[2,2:18]
View(MLE)
final.result <- matrix(0,6,17)
rownames(final.result) <- c("MLE.G", "CIHI.G", "CILOW.G",
"MLE.L", "CIHI.L", "CILOW.L")
final.result[1,] <- MLE[1,2:18]
final.result <- matrix(0,6,17)
rownames(final.result) <- c("MLE.G", "CIHI.G", "CILOW.G",
"MLE.L", "CIHI.L", "CILOW.L")
final.result[1,1:17] <- MLE[1,2:18]
MLE[1,2:18]
final.result <- matrix(0,6,17)
rownames(final.result) <- c("MLE.G", "CIHI.G", "CILOW.G",
"MLE.L", "CIHI.L", "CILOW.L")
final.result[1,1:17] <- as.numeric(MLE[1,2:18])
View(final.result)
final.result[4,1:17] <- as.numeric(MLE[2,2:18])
View(final.result)
for(j in c(2,3,5,6)){
print(j)
}
View(parameters)
f.parameters <- parameters
View(parameters)
View(f.parameters)
f.parameters <- parameters[,2:18]
rownames(f.parameters) <- parameters[,1]
f.parameters
f.parameters <- parameters[,2:18]
rownames(f.parameters) <- parameters[,1]
for(i in 1:17){
f.parameters[3, i] <- 2 * f.parameters[1,i] - f.parameters[3, i]
f.parameters[4, i] <- 2 * f.parameters[1,i] - f.parameters[4, i]
f.parameters[5, i] <- 2 * f.parameters[2,i] - f.parameters[5, i]
f.parameters[6, i] <- 2 * f.parameters[2,i] - f.parameters[6, i]
}
f.parameters <- parameters[,2:18]
rownames(f.parameters) <- parameters[,1]
for(i in 1:17){
f.parameters[3, i] <- 2 * as.numeric(f.parameters[1,i]) - f.parameters[3, i]
f.parameters[4, i] <- 2 * as.numeric(f.parameters[1,i]) - f.parameters[4, i]
f.parameters[5, i] <- 2 * as.numeric(f.parameters[2,i]) - f.parameters[5, i]
f.parameters[6, i] <- 2 * as.numeric(f.parameters[2,i]) - f.parameters[6, i]
}
f.parameters <- parameters[,2:18]
rownames(f.parameters) <- parameters[,1]
for(i in 1:17){
f.parameters[3, i] <- 2 * as.numeric(f.parameters[1,i]) - as.numeric(f.parameters[3, i])
f.parameters[4, i] <- 2 * as.numeric(f.parameters[1,i]) - as.numeric(f.parameters[4, i])
f.parameters[5, i] <- 2 * as.numeric(f.parameters[2,i]) - as.numeric(f.parameters[5, i])
f.parameters[6, i] <- 2 * as.numeric(f.parameters[2,i]) - as.numeric(f.parameters[6, i])
}
View(f.parameters)
write.csv(f.parameters, file="../final.params.csv")
