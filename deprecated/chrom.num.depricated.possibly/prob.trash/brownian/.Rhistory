counter <- 1
counter <- counter + 1
history[1:census, counter] <- sample(1:census, length(unique(history[, (counter - 1)])), replace = T)
while(lineages > 1){
lineages <- sum(!is.na(unique(history[1:10, counter])))
history[1:lineages, (counter + 1)] <- sort(unique(history[1:10, counter]))
counter <- counter + 1
history[1:lineages, (counter + 1)] <- sort(sample(1:census, length(unique(history[, (counter)])) - 1, replace = T))
counter <- counter + 1
}
## now plot it
plot(0, 0, col = 'white', ylim = c(1,census),
xlim = c(1, counter),
main='Coalesence Simulation',
xlab = 'Generation',
ylab = 'Individuals')
for(j in 1:(counter-1)){
for(i in 1:census){
lines(c(j,(j+1)), history[i,j:(j+1)])
}
}
census <- 6
history <- as.data.frame(1:census)
lineages <- census
counter <- 1
counter <- counter + 1
history[1:census, counter] <- sample(1:census, length(unique(history[, (counter - 1)])), replace = T)
while(lineages > 1){
lineages <- sum(!is.na(unique(history[1:10, counter])))
history[1:lineages, (counter + 1)] <- sort(unique(history[1:10, counter]))
counter <- counter + 1
history[1:lineages, (counter + 1)] <- sort(sample(1:census, length(unique(history[, (counter)])) - 1, replace = T))
counter <- counter + 1
}
## now plot it
plot(0, 0, col = 'white', ylim = c(1,census),
xlim = c(1, counter),
main='Coalesence Simulation',
xlab = 'Generation',
ylab = 'Individuals')
for(j in 1:(counter-1)){
for(i in 1:census){
lines(c(j,(j+1)), history[i,j:(j+1)])
}
}
census <- 25
history <- as.data.frame(1:census)
lineages <- census
counter <- 1
counter <- counter + 1
history[1:census, counter] <- sample(1:census, length(unique(history[, (counter - 1)])), replace = T)
while(lineages > 1){
lineages <- sum(!is.na(unique(history[1:10, counter])))
history[1:lineages, (counter + 1)] <- sort(unique(history[1:10, counter]))
counter <- counter + 1
history[1:lineages, (counter + 1)] <- sort(sample(1:census, length(unique(history[, (counter)])) - 1, replace = T))
counter <- counter + 1
}
## now plot it
plot(0, 0, col = 'white', ylim = c(1,census),
xlim = c(1, counter),
main='Coalesence Simulation',
xlab = 'Generation',
ylab = 'Individuals')
for(j in 1:(counter-1)){
for(i in 1:census){
lines(c(j,(j+1)), history[i,j:(j+1)])
}
}
census <- 10
history <- as.data.frame(1:census)
lineages <- census
counter <- 1
counter <- counter + 1
history[1:census, counter] <- sample(1:census, length(unique(history[, (counter - 1)])), replace = T)
while(lineages > 1){
lineages <- sum(!is.na(unique(history[1:10, counter])))
history[1:lineages, (counter + 1)] <- sort(unique(history[1:10, counter]))
counter <- counter + 1
history[1:lineages, (counter + 1)] <- sort(sample(1:census, length(unique(history[, (counter)])) - 1, replace = T))
counter <- counter + 1
}
## now plot it
plot(0, 0, col = 'white', ylim = c(1,census),
xlim = c(1, counter),
main='Coalesence Simulation',
xlab = 'Generation',
ylab = 'Individuals')
for(j in 1:(counter-1)){
for(i in 1:census){
lines(c(j,(j+1)), history[i,j:(j+1)])
}
}
View(history)
census <- 10
history <- as.data.frame(1:census)
lineages <- census
counter <- 1
counter <- counter + 1
history[1:census, counter] <- sample(1:census, length(unique(history[, (counter - 1)])), replace = T)
while(lineages > 1){
lineages <- sum(!is.na(unique(history[1:10, counter])))
history[1:lineages, (counter + 1)] <- sort(unique(history[1:10, counter]))
counter <- counter + 1
history[1:lineages, (counter + 1)] <- sort(sample(1:census, length(unique(history[, (counter)])) - 1, replace = T))
counter <- counter + 1
}
## now plot it
plot(0, 0, col = 'white', ylim = c(1,census),
xlim = c(1, counter),
main='Coalesence Simulation',
xlab = 'Generation',
ylab = 'Individuals')
foo <- 1
while(foo < (counter)){
for(i in 1:census){
lines(c(foo,(foo+1)), history[i,foo:(foo+1)])
foo <- foo + 2
}
}
plot(0, 0, col = 'white', ylim = c(1,census),
xlim = c(1, counter),
main='Coalesence Simulation',
xlab = 'Generation',
ylab = 'Individuals')
foo <- 1
i<-1
foo <- 1
while(foo < (counter)){
for(i in 1:census){
lines(c(foo,(foo+1)), history[i,foo:(foo+1)])
}
foo <- foo + 2
}
census <- 10
history <- as.data.frame(1:census)
lineages <- census
counter <- 1
counter <- counter + 1
history[1:census, counter] <- sample(1:census, length(unique(history[, (counter - 1)])), replace = T)
while(lineages > 1){
lineages <- sum(!is.na(unique(history[1:10, counter])))
history[1:lineages, (counter + 1)] <- sort(unique(history[1:10, counter]))
counter <- counter + 1
history[1:lineages, (counter + 1)] <- sort(sample(1:census, length(unique(history[, (counter)])) - 1, replace = T))
counter <- counter + 1
}
## now plot it
plot(0, 0, col = 'white', ylim = c(1,census),
xlim = c(1, counter),
main='Coalesence Simulation',
xlab = 'Generation',
ylab = 'Individuals')
foo <- 1
foox <- 1
while(foo < (counter)){
for(i in 1:census){
lines(c(foox,(foox + 1)), history[i,foo:(foo + 1)])
}
foo <- foo + 2
foox <- foox + 1
}
plot(0, 0, col = 'white', ylim = c(1,census),
xlim = c(1, counter/2 + 1),
main='Coalesence Simulation',
xlab = 'Generation',
ylab = 'Individuals')
foo <- 1
foox <- 1
while(foo < (counter)){
for(i in 1:census){
lines(c(foox,(foox + 1)), history[i,foo:(foo + 1)])
}
foo <- foo + 2
foox <- foox + 1
}
census <- 50
history <- as.data.frame(1:census)
lineages <- census
counter <- 1
counter <- counter + 1
history[1:census, counter] <- sample(1:census, length(unique(history[, (counter - 1)])), replace = T)
while(lineages > 1){
lineages <- sum(!is.na(unique(history[1:10, counter])))
history[1:lineages, (counter + 1)] <- sort(unique(history[1:10, counter]))
counter <- counter + 1
history[1:lineages, (counter + 1)] <- sort(sample(1:census, length(unique(history[, (counter)])) - 1, replace = T))
counter <- counter + 1
}
## now plot it
plot(0, 0, col = 'white', ylim = c(1,census),
xlim = c(1, counter/2 + 1),
main='Coalesence Simulation',
xlab = 'Generation',
ylab = 'Individuals')
foo <- 1
foox <- 1
while(foo < (counter)){
for(i in 1:census){
lines(c(foox,(foox + 1)), history[i,foo:(foo + 1)])
}
foo <- foo + 2
foox <- foox + 1
}
census <- 40
history <- as.data.frame(1:census)
lineages <- census
counter <- 1
counter <- counter + 1
history[1:census, counter] <- sample(1:census, length(unique(history[, (counter - 1)])), replace = T)
while(lineages > 1){
lineages <- sum(!is.na(unique(history[1:10, counter])))
history[1:lineages, (counter + 1)] <- sort(unique(history[1:10, counter]))
counter <- counter + 1
history[1:lineages, (counter + 1)] <- sort(sample(1:census, length(unique(history[, (counter)])) - 1, replace = T))
counter <- counter + 1
}
## now plot it
plot(0, 0, col = 'white', ylim = c(1,census),
xlim = c(1, counter/2 + 1),
main='Coalesence Simulation',
xlab = 'Generation',
ylab = 'Individuals')
foo <- 1
foox <- 1
while(foo < (counter)){
for(i in 1:census){
lines(c(foox,(foox + 1)), history[i,foo:(foo + 1)])
}
foo <- foo + 2
foox <- foox + 1
}
census <- 20
history <- as.data.frame(1:census)
lineages <- census
counter <- 1
counter <- counter + 1
history[1:census, counter] <- sample(1:census, length(unique(history[, (counter - 1)])), replace = T)
while(lineages > 1){
lineages <- sum(!is.na(unique(history[1:10, counter])))
history[1:lineages, (counter + 1)] <- sort(unique(history[1:10, counter]))
counter <- counter + 1
history[1:lineages, (counter + 1)] <- sort(sample(1:census, length(unique(history[, (counter)])) - 1, replace = T))
counter <- counter + 1
}
## now plot it
plot(0, 0, col = 'white', ylim = c(1,census),
xlim = c(1, counter/2 + 1),
main='Coalesence Simulation',
xlab = 'Generation',
ylab = 'Individuals')
foo <- 1
foox <- 1
while(foo < (counter)){
for(i in 1:census){
lines(c(foox,(foox + 1)), history[i,foo:(foo + 1)])
}
foo <- foo + 2
foox <- foox + 1
}
library(devtools)
install.packages("devtools")
library(devtools)
install_github("evobiR")
help(install_github)
install_github("evobiR", username='coleoguy')
install_git("evobiR", username='coleoguy')
install.packages('LearnBayes')
install.packages('evobiR')
install.packages("ape")
install.packages("shiny")
library(shiny)
runExample("01_hello")
library("evobiR", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
foo <- data(mite)
data(mite)
load(mite.data)
data(mite.data)
rownames(mite.data)
install.packages("markovjumps")
install.packages("~/Desktop/mypack/example.R.packages/markovjumps.tar.gz", repos = NULL, type = "source")
chromosomes <- 23
ploidy <- 2
results <- vector()
for(i in 1:chromosomes){
results[i] <- chromosomes^ploidy
}
plot(results)
results <- vector()
for(i in 1:chromosomes){
results[i] <- i^ploidy
}
plot(results)
plot(results, lty=1)
plot(results, lty=2)
plot(results, lty=3)
help(plot)
plot(results, type='l')
install_github("evobir", username='coleoguy')
library(devtools)
install_github("evobir", username='coleoguy')
library(evobiR)
ViewEvo("wf.model")
setwd("~/Desktop/Dropbox/papers/chrom.num/data and analysis/figures/model.adequacy")
par.means <- as.data.frame(matrix(,1,4))
colnames(new.results) <- c("group", "sigma", "alpha", "z")
fams <- c("Bembidion", "Carabidae", "Chrysolina",
"Chrysomelidae", "Cicindela", "Curculionidae",
"Ips", "Pimelia", "Scarabaeidae", "Timarcha")
colnames(par.means) <- c("group", "sigma", "alpha", "z")
fams <- c("Bembidion", "Carabidae", "Chrysolina",
"Chrysomelidae", "Cicindela", "Curculionidae",
"Ips", "Pimelia", "Scarabaeidae", "Timarcha")
par.means <- as.data.frame(matrix(,1,4))
colnames(par.means) <- c("group", "sigma", "alpha", "z")
fams <- c("Bembidion", "Carabidae", "Chrysolina",
"Chrysomelidae", "Cicindela", "Curculionidae",
"Ips", "Scarabaeidae", "Timarcha")
counter <- 1
j<-1
data <- read.csv(paste(fam, "/data.csv", sep=""))
fam <- fams[j]
data <- read.csv(paste(fam, "/data.csv", sep=""))
paste(fam, "/data.csv", sep="")
setwd("~/Desktop/Dropbox/papers/chrom.num/data and analysis/figures/par.est")
data <- read.csv(paste(fam, "/data.csv", sep=""))
for(j in 1:9){
fam <- fams[j]
data <- read.csv(paste(fam, "/data.csv", sep=""))
print(j)
}
for(j in 1:9){
fam <- fams[j]
data <- read.csv(paste(fam, "/data.csv", sep=""))
print(data[1,1])
}
tree <- read.tree(paste(fam, "/", fam, need[i, j], ".tree", sep=""))
library(geiger)
tree <- read.tree(paste(fam, "/", fam, need[i, j], ".tree", sep=""))
tree <- read.tree(paste(fam, "/", fam, i, ".tree", sep=""))
i<-1
tree <- read.tree(paste(fam, "/", fam, i, ".tree", sep=""))
fam <- fams[j]
data <- read.csv(paste(fam, "/data.csv", sep=""))
chrom <- data[,2]
names(chrom) <- data[,1]
par.means[counter,1] <- fam
tree <- read.tree(paste(fam, "/", fam, i, ".tree", sep=""))
foo <- fitContinuous(tree, chrom, model="OU")$opt$aicc
foo
foo <- fitContinuous(tree, chrom, model="OU")$opt
foo
par.means[counter, 2:4] <- c(foo$sigsq, foo$alpha, foo$z0)
View(par.means)
setwd("~/Desktop/Dropbox/papers/chrom.num/data and analysis/figures/par.est")
library(geiger)
par.means <- as.data.frame(matrix(,1,4))
colnames(par.means) <- c("group", "sigma", "alpha", "z")
fams <- c("Bembidion", "Carabidae", "Chrysolina",
"Chrysomelidae", "Cicindela", "Curculionidae",
"Ips", "Scarabaeidae", "Timarcha")
counter <- 1
for(j in 1:9){
fam <- fams[j]
data <- read.csv(paste(fam, "/data.csv", sep=""))
chrom <- data[,2]
names(chrom) <- data[,1]
for(i in 1:12){
par.means[counter,1] <- fam
tree <- read.tree(paste(fam, "/", fam, i, ".tree", sep=""))
foo <- fitContinuous(tree, chrom, model="OU")$opt
par.means[counter, 2:4] <- c(foo$sigsq, foo$alpha, foo$z0)
counter <- counter + 1
print(paste(j, "Done with:", fam, i))
}
}
View(par.means)
write.csv(par.means, file="temp.par.means")
setwd("~/Desktop/Dropbox/papers/chrom.num/data and analysis/figures/par.est")
library(geiger)
par.means <- as.data.frame(matrix(,1,4))
colnames(par.means) <- c("group", "sigma", "alpha", "z")
fams <- c("Bembidion", "Carabidae", "Chrysolina",
"Chrysomelidae", "Cicindela", "Curculionidae",
"Ips", "Scarabaeidae", "Timarcha")
counter <- 1
for(j in 1:9){
fam <- fams[j]
data <- read.csv(paste(fam, "/data.csv", sep=""))
chrom <- data[,2]
names(chrom) <- data[,1]
for(i in 1:100){
par.means[counter,1] <- fam
tree <- read.tree(paste(fam, "/", fam, i, ".tree", sep=""))
foo <- fitContinuous(tree, chrom, model="OU")$opt
par.means[counter, 2:4] <- c(foo$sigsq, foo$alpha, foo$z0)
counter <- counter + 1
print(paste(j, "Done with:", fam, i))
}
}
write.csv(par.means, file="par.means.csv")
warnings()
setwd("~/Desktop/Dropbox/papers/chrom.num/data and analysis/figures/par.est")
## First lets just set up the results table for later fill in
results <- as.data.frame(matrix(,1,10))
colnames(results) <- c("group", "alpha", "sigma", "z",
"lb.alpha", "lb.sigma", "lb.z",
"ub.alpha", "ub.sigma", "ub.z")
data <- read.csv("par.est.csv", as.is=T)
par.means <- read.csv("par.means.csv", as.is=T)
View(par.means)
View(data)
fams <- unique(par.means[,2])
i <- 1
fam <- fams[i]
mean(par.means[par.means[,5] == fam, "z"])
View(par.means)
mean(par.means[par.means[,5] == fam, z])
colnames(par.means)
View(par.means)
mean(par.means[par.means[,2] == fam, z])
mean(par.means[par.means[,2] == fam, "z"])
View(par.means)
View(data)
colnames(data)
data <- read.csv("par.est.csv", as.is=T)
par.means <- read.csv("par.means.csv", as.is=T)
fams <- unique(par.means[,2])
for(i in 1:9){
fam <- fams[i]
results[i,1] <- fam
results[i,2] <- mean(par.means[par.means[,2] == fam, "alpha"])
results[i,3] <- mean(par.means[par.means[,2] == fam, "sigma"])
results[i,4] <- mean(par.means[par.means[,2] == fam, "z"])
results[i,5] <- min(data[data[,2] == fam, "alpha.lb"])
results[i,6] <- min(data[data[,2] == fam, "sigma2.lb.1"])
results[i,7] <- min(data[data[,2] == fam, "z.lb.1"])
results[i,8] <- max(data[data[,2] == fam, "alpha.ub"])
results[i,9] <- max(data[data[,2] == fam, "sigma2.ub.1"])
results[i,10] <- max(data[data[,2] == fam, "z.ub.1"])
}
View(results)
help(min)
data <- read.csv("par.est.csv", as.is=T)
par.means <- read.csv("par.means.csv", as.is=T)
fams <- unique(par.means[,2])
for(i in 1:9){
fam <- fams[i]
results[i,1] <- fam
results[i,2] <- mean(par.means[par.means[,2] == fam, "alpha"])
results[i,3] <- mean(par.means[par.means[,2] == fam, "sigma"])
results[i,4] <- mean(par.means[par.means[,2] == fam, "z"])
results[i,5] <- min(data[data[,2] == fam, "alpha.lb"], na.rm = T)
results[i,6] <- min(data[data[,2] == fam, "sigma2.lb.1"], na.rm = T)
results[i,7] <- min(data[data[,2] == fam, "z.lb.1"], na.rm = T)
results[i,8] <- max(data[data[,2] == fam, "alpha.ub"], na.rm = T)
results[i,9] <- max(data[data[,2] == fam, "sigma2.ub.1"], na.rm = T)
results[i,10] <- max(data[data[,2] == fam, "z.ub.1"], na.rm = T)
}
View(results)
View(par.means)
View(data)
View(results)
View(data)
View(results)
data <- read.csv("par.est.csv", as.is=T)
par.means <- read.csv("par.means.csv", as.is=T)
fams <- unique(par.means[,2])
for(i in 1:9){
fam <- fams[i]
results[i,1] <- fam
results[i,2] <- mean(par.means[par.means[,2] == fam, "alpha"])
results[i,3] <- mean(par.means[par.means[,2] == fam, "sigma"])
results[i,4] <- mean(par.means[par.means[,2] == fam, "z"])
results[i,5] <- mean(data[data[,2] == fam, "alpha.lb"], na.rm = T)
results[i,6] <- mean(data[data[,2] == fam, "sigma2.lb.1"], na.rm = T)
results[i,7] <- mean(data[data[,2] == fam, "z.lb.1"], na.rm = T)
results[i,8] <- mean(data[data[,2] == fam, "alpha.ub"], na.rm = T)
results[i,9] <- mean(data[data[,2] == fam, "sigma2.ub.1"], na.rm = T)
results[i,10] <- mean(data[data[,2] == fam, "z.ub.1"], na.rm = T)
}
View(results)
View(par.means)
View(data)
data <- read.csv("par.est.csv", as.is=T)
par.means <- read.csv("par.means.csv", as.is=T)
fams <- unique(par.means[,2])
for(i in 1:9){
fam <- fams[i]
results[i,1] <- fam
results[i,2] <- mean(par.means[par.means[,2] == fam, "alpha"])
results[i,3] <- mean(par.means[par.means[,2] == fam, "sigma"])
results[i,4] <- mean(par.means[par.means[,2] == fam, "z"])
results[i,5] <- mean(data[data[,2] == fam, "alpha.lb"], na.rm = T)
results[i,6] <- mean(data[data[,2] == fam, "sigma2.lb"], na.rm = T)
results[i,7] <- mean(data[data[,2] == fam, "z.lb.1"], na.rm = T)
results[i,8] <- mean(data[data[,2] == fam, "alpha.ub"], na.rm = T)
results[i,9] <- mean(data[data[,2] == fam, "sigma2.ub"], na.rm = T)
results[i,10] <- mean(data[data[,2] == fam, "z.ub.1"], na.rm = T)
}
View(results)
setwd("~/Desktop/Dropbox/papers/chrom.num/data and analysis/analyses/brownian")
trees <- read.nexus("../../data/trees.nexus")
groups <- read.csv('../../data/groups.csv', as.is = T)
data <- read.csv('../../data/chrom.nums.csv', as.is = T)
data.v <- data[,2]
names(data.v) <- data[,1]
rm(data)
groups <- groups[,c(1,3,6:9,11,13,15,22:22)]
colSums(is.na(groups))
colSums(groups!="")
.5*.3
