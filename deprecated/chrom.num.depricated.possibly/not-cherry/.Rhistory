print(census)
}
y <- as.bigq(sum(census[,2]))
print(y)
L <- 19
M <- 100
M <- M-1
foo2 <- census <- matrix(c(1:L, rep(0, L)),L,2)
census[1, 2] <- 1
for(i in 1:M){
foo <- foo2
#print(paste("Month:", i))
for(j in 2:L){
foo[j, 2] <- census[(j-1), 2]
}
foo[1, 2] <- sum(census[2:L,2])
census <- foo
print(census)
}
y <- as.bigq(sum(census[,2]))
print(y)
L <- 19
M <- 100
M <- M-1
foo2 <- census <- matrix(c(1:L, rep(0, L)),L,2)
census[1, 2] <- 1
for(i in 1:M){
foo <- foo2
#print(paste("Month:", i))
for(j in 2:L){
foo[j, 2] <- census[(j-1), 2]
}
foo[1, 2] <- sum(census[2:L,2])
census <- foo
print(census)
}
x <- as.bigq(sum(census[,2]))
y <- sum(as.bigq(census[,2]))
print(x)
print(y)
L <- 19
M <- 100
M <- M-1
foo2 <- census <- matrix(c(1:L, rep(0, L)),L,2)
census[1, 2] <- 1
for(i in 1:M){
foo <- foo2
#print(paste("Month:", i))
for(j in 2:L){
foo[j, 2] <- census[(j-1), 2]
}
foo[1, 2] <- sum(census[2:L,2])
census <- foo
print(census)
}
x <- as.bigq(sum(census[,2]))
y <- sum(as.bigq(census[,2]))
print(x)
print(y)
L <- 16
M <- 83
M <- M-1
foo2 <- census <- matrix(c(1:L, rep(0, L)),L,2)
census[1, 2] <- 1
for(i in 1:M){
foo <- foo2
#print(paste("Month:", i))
for(j in 2:L){
foo[j, 2] <- census[(j-1), 2]
}
foo[1, 2] <- sum(census[2:L,2])
census <- foo
print(census)
}
x <- as.bigq(sum(census[,2]))
y <- sum(as.bigq(census[,2]))
print(x)
print(y)
L <- 3
M <- 6
M <- M-1
foo2 <- census <- matrix(c(1:L, rep(0, L)),L,2)
census[1, 2] <- 1
for(i in 1:M){
foo <- foo2
#print(paste("Month:", i))
for(j in 2:L){
foo[j, 2] <- census[(j-1), 2]
}
foo[1, 2] <- sum(census[2:L,2])
census <- foo
print(census)
}
x <- as.bigq(sum(census[,2]))
y <- sum(as.bigq(census[,2]))
print(x)
print(y)
L <- 20
M <- 96
M <- M-1
foo2 <- census <- list()
census[[1]] <- as.bigq(1)
for(i in 1:M){
foo <- foo2
for(j in 2:L){
foo[[j]] <- census[[j-1]]
}
foo[[1]] <- sum(unlist(census)[2:L]]
census <- foo
L <- 20
M <- 96
M <- M-1
foo2 <- census <- list()
census[[1]] <- as.bigq(1)
for(i in 1:M){
foo <- foo2
for(j in 2:L){
foo[[j]] <- census[[j-1]]
}
foo[[1]] <- sum(unlist(census)[2:L]
census <- foo
}
y <- sum(unlist(census))
print(y)
L <- 20
M <- 96
M <- M-1
foo2 <- census <- list()
census[[1]] <- as.bigq(1)
for(i in 1:M){
foo <- foo2
for(j in 2:L){
foo[[j]] <- census[[j-1]]
}
foo[[1]] <- sum(unlist(census)[2:L])
census <- foo
}
y <- sum(unlist(census))
print(y)
L <- 20
M <- 96
M <- M-1
foo2 <- census <- list()
census[[1]] <- as.bigq(1)
i <- 1
foo <- foo2
j <- 2
foo[[1]] <- 0
for(j in 2:L){
foo[[j]] <- census[[j-1]]
}
foo2 <- census <- list(length=L)
census[[1]] <- as.bigq(1)
for(i in 1:M){
foo <- foo2
foo[[1]] <- 0
for(j in 2:L){
foo[[j]] <- census[[j-1]]
}
foo[[1]] <- sum(unlist(census)[2:L])
census <- foo
}
W <- vector("list", 602)
foo2 <- census <- vector("list", L)
L <- 20
M <- 96
M <- M-1
foo2 <- census <- vector("list", L)
census[[1]] <- as.bigq(1)
for(i in 1:M){
foo <- foo2
foo[[1]] <- 0
for(j in 2:L){
foo[[j]] <- census[[j-1]]
}
foo[[1]] <- sum(unlist(census)[2:L])
census <- foo
}
y <- sum(unlist(census))
print(y)
unlist(census)
unlist(census)[2:L]
census
L <- 20
M <- 96
M <- M-1
foo2 <- census <- vector("list", L)
census[[1]] <- as.bigq(1)
census
foo <- foo2
foo[[1]] <- 0
foo[[1]] <- as.bigq(0)
census
foo
j <- 2
census[[j-1]]
foo[[j]] <- census[[j-1]]
foo
unlist(census)
census[[1]]
census[[2]]
unlist(census)
sum(unlist(census))
census[[1]]
census[[1]]->x
census[[1]]->y
x + y
length(census)
for(i in 1:length(census)){
bar[i] <- census[i]
}
bar <- vector()
for(i in 1:length(census)){
bar[i] <- census[i]
}
bar <- vector()
for(i in 1:length(census)){
bar[i] <- census[[i]]
}
sum(census[1:3])
L <- 20
M <- 96
M <- M-1
foo2 <- census <- vector("list", L)
census[[1]] <- as.bigz(1)
for(i in 1:M){
foo <- foo2
foo[[1]] <- as.bigz(0)
for(j in 2:L){
foo[[j]] <- census[[j-1]]
}
bar <- vector()
for(i in 1:length(census)){
bar[i] <- census[[i]]
}
census <- foo
}
y <- sum(unlist(census))
print(y)
y <- add.bigz(census)
y <- add.bigz(unlist(census))
unlist(census)
37450/2
.2^5
.2^6
99660/2
sqrt(1/2)
1 - .5^2
(1 - .5^2) * (1-.2^2)
(1 - .5^2) * (.2^2)
(.5^2) * (1-.2^2)
(.5^2) * (.2^2)
(1 - .5^2) * (1-.2^2) * 95
(1 - .5^2) * (.2^2) * 38
(.5^2) * (1-.2^2) * 90
(.5^2) * (.2^2) * 33
(1 - .5^2) * (1-.2^2) * 95 +
(1 - .5^2) * (.2^2) * 38 +
(.5^2) * (1-.2^2) * 90 +
(.5^2) * (.2^2) * 33
95*.4
38*.1
90*.4
33*.1
95*.4 +
38*.1 +
90*.4 +
33*.1
91.47-81.1
95-38
57*.2
2*.25*2.5
2*.64*11.4
91.47-20.74
setwd("~/Desktop/Dropbox/papers/chrom.num/data and analysis/not-cherry")
data <- read.csv("data.csv", as.is=T)
# remove NA data & add row names
data <- data[!is.na(data[, 3]), ]
row.names(data) <- data[, 1]
# read the tree
library(ape)
trees <- read.nexus("../data/trees.nexus")
# make a dataset in the make.simmap format for the focal taxa
library(geiger)
foo <- treedata(trees[[1]], data)
data <- foo[[2]]
regime.data <- data[, c(3,4)]
sim.data <- cbind(as.numeric(regime.data[,1]), as.numeric(regime.data[,2]))
row.names(sim.data) <- row.names(regime.data)
sim.data <- as.matrix(sim.data)
colnames(sim.data) <- c("winged", "wingless")
# now lets do a multiphylo object as well
new.trees <- vector("list", length=100)
for(i in 1:100){
new.trees[[i]] <- treedata(trees[[i]], data)[[1]]
}
class(new.trees) <- "multiPhylo"
# now clean up
rm(foo, i, trees, regime.data)
# do the ancestral state reconstructions
library(phytools)
foo1 <- make.simmap(new.trees, sim.data, maxit=200000, model = "SYM", nsim = 5, pi = c(1, 0))
foo1 <- make.simmap(new.trees[[1]], sim.data, maxit=200000, model = "SYM", pi = c(1, 0))
foo1 <- make.simmap(new.trees[[1]], sim.data, maxit=200000, model = "SYM", nsim = 100, pi = c(1, 0))
densityMap(foo1)
warnings()
foo2 <- foo1[[1]]
densityMap(foo2)
foo2 <- list()
foo2[[1]] <- foo1[[1]]
foo2[[2]] <- foo1[[2]]
densityMap(foo2)
class(foo2) <- "multiPhylo"
densityMap(foo2)
plotSimmap(foo[[1]])
plotSimmap(foo1[[1]])
plotSimmap(foo1[[2]])
plotSimmap(foo1[[3]])
plotSimmap(foo1[[4]])
plotSimmap(foo1[[30]])
plotSimmap(foo1[[36]])
plotSimmap(foo1[[80]])
plotSimmap(foo1[[90]])
View(sim.data)
plotSimmap(foo1[[90]])
plotSimmap(foo1[[91]])
plotSimmap(foo1[[92]])
plotSimmap(foo1[[93]])
plotSimmap(foo1[[94]])
plotSimmap(foo1[[95]])
plotSimmap(foo1[[95]], fsize=.1)
plotSimmap(foo1[[95]], fsize=.01)
plotSimmap(foo1[[95]], fsize=.01, type="fan")
plotSimmap(foo1[[1]], fsize=.01, type="fan")
foo1 <- make.simmap(new.trees, sim.data, maxit=200000, model = "SYM", pi = c(1, 0))
setwd("~/Desktop/gbg.talk/trees")
chrom.num <- as.numeric(data[, 2])
names(chrom.num) <- row.names(sim.data)
setwd("~/Desktop/Dropbox/papers/chrom.num/data and analysis/not-cherry")
data <- read.csv("data.csv", as.is=T)
# remove NA data & add row names
data <- data[!is.na(data[, 3]), ]
row.names(data) <- data[, 1]
# read the tree
library(ape)
trees <- read.nexus("../data/trees.nexus")
# make a dataset in the make.simmap format for the focal taxa
library(geiger)
foo <- treedata(trees[[1]], data)
data <- foo[[2]]
regime.data <- data[, c(3,4)]
sim.data <- cbind(as.numeric(regime.data[,1]), as.numeric(regime.data[,2]))
row.names(sim.data) <- row.names(regime.data)
sim.data <- as.matrix(sim.data)
colnames(sim.data) <- c("winged", "wingless")
# now lets do a multiphylo object as well
new.trees <- vector("list", length=100)
for(i in 1:100){
new.trees[[i]] <- treedata(trees[[i]], data)[[1]]
}
class(new.trees) <- "multiPhylo"
# now clean up
rm(foo, i, trees, regime.data)
# do the ancestral state reconstructions
library(phytools)
foo1 <- make.simmap(new.trees, sim.data, maxit=200000, model = "SYM", pi = c(1, 0))
#foo2 <- make.simmap(new.trees, sim.data, maxit=200000, model = "ARD", nsim = 5, pi = c(1, 0))
chrom.num <- as.numeric(data[, 2])
names(chrom.num) <- row.names(sim.data)
setwd("~/Desktop/gbg.talk/trees")
setwd("~/Desktop/gbg.talk/trees")
i <- 1
png(filename = paste"tree", i, ".png")
png(filename = paste("tree", i, ".png"))
plotSimmap(foo1[[1]], fsize=.01, type="fan")
dev.off()
for(i in 1:10){
png(filename = paste("tree", i, ".png"))
plotSimmap(foo1[[1]], fsize=.01, type="fan")
dev.off()
}
for(i in 1:10){
png(filename = paste("tree", i, ".png"))
plotSimmap(foo1[[i]], fsize=.01, type="fan")
dev.off()
}
for(i in 1:100){
png(filename = paste("tree", i, ".png"))
plotSimmap(foo1[[i]], fsize=.01, type="fan")
dev.off()
}
View(sim.data)
row.names(sim.data)
new.trees[[1]]
new.trees[[1]]$tip.label
plot(new.trees[[1]], type="fan")
plot(new.trees[[1]], type="fan", tip.labels=F)
plot(new.trees[[1]], type="fan", tip.label=F)
plot(new.trees[[1]], type="fan", show.tip.label=F)
plot(new.trees[[1]], type="fan", show.tip.labels=F)
help(plot.phylo)
plot(new.trees[[1]], type="fan", show.tip.label=F)
new.trees[[1]]$tip.label
length(new.trees[[1]]$tip.label)
View(sim.data)
tip.states.h <- tip.states.b <- vector()
for(i in 1:length(new.trees[[1]]$tip.label)){
if(sim.data[i, 1] > .500) tip.states.h[[i]] <- 'blue'
if(sim.data[i, 1] < .500) tip.states.h[[i]] <- 'red'
}
tip.labels(pch=19, cols=tip.states.h)
tiplabels(pch=19, cols=tip.states.h)
tiplabels(pch=19, col=tip.states.h)
for(i in 1:length(new.trees[[1]]$tip.label)){
if(sim.data[i, 1] > .500) tip.states.h[[i]] <- 'blue'
if(sim.data[i, 1] < .501) tip.states.h[[i]] <- 'red'
}
plot(new.trees[[1]], type="fan", show.tip.label=F)
tiplabels(pch=19, col=tip.states.h)
View(sim.data)
colorRampPalette(c("blue", "red"))
colorRampPalette(c("blue", "red"))(4)
colorRampPalette(c("blue", "red"))(100)
row.names(sim.data)
new.trees[[1]]$tip.label
mix.cols <-
tip.states.h <- tip.states.b <- vector()
for(i in 1:length(new.trees[[1]]$tip.label)){
if(sim.data[i, 1] == 1) tip.states.h[[i]] <- 'blue'
if(sim.data[i, 1] == 0) tip.states.h[[i]] <- 'red'
}
plot(new.trees[[1]], type="fan", show.tip.label=F)
tiplabels(pch=19, col=tip.states.h)
help(tiplabels)
plot(new.trees[[1]], type="fan", show.tip.label=F)
tiplabels(pch=19, col=tip.states.h)
plot(new.trees[[1]], type="fan", show.tip.label=F)
new.trees[[1]] -> tree
plot(tree, type="fan", show.tip.label=F)
tree$edge.length
tree$edge.length <- tree$edge.length + .2
plot(tree, type="fan", show.tip.label=F)
tree$edge.length <- tree$edge.length + .8
plot(tree, type="fan", show.tip.label=F)
tree$edge.length <- tree$edge.length + 2.8
plot(tree, type="fan", show.tip.label=F)
tree$edge.length <- tree$edge.length + 2.8
plot(tree, type="fan", show.tip.label=F)
tree$edge.length <- tree$edge.length + 2.8
plot(tree, type="fan", show.tip.label=F)
new.trees[[1]] -> tree
terms <- tree$edge[, 2] <= Ntip(tree)
tree$edge.length
new.trees[[1]] -> tree
terms <- tree$edge[, 2] <= Ntip(tree)
plot(tree, type="fan", show.tip.label=F)
tree$edge.length[terms]  <- tree$edge.length[terms] + 6
plot(tree, type="fan", show.tip.label=F)
tiplabels(pch=19, col=tip.states.h)
mix.cols <- colorRampPalette(c("blue", "red"))(100)
mix.cols[sim.data[i, 1] * 100]
for(i in 1:length(new.trees[[1]]$tip.label)){
tip.states.b[[i]] <- mix.cols[sim.data[i, 1] * 100]
}
mix.cols <- colorRampPalette(c("blue", "red"))(101)
for(i in 1:length(new.trees[[1]]$tip.label)){
tip.states.b[[i]] <- mix.cols[(sim.data[i, 1] * 100) + 1]
}
plot(tree, type="fan", show.tip.label=F)
tiplabels(pch=19, col=tip.states.b)
help(ace)
matrix(c(0, 1, 2, 1, 0, 3, 2, 3, 0), 3))
matrix(c(0, 1, 2, 1, 0, 3, 2, 3, 0), 3)
matrix(c(0, 1, 0, 0), 2)
matrix(c(0, 0, 1, 0), 2)
setwd("~/Desktop/Dropbox/papers/chrom.num/data and analysis/not-cherry")
data <- read.csv("data.csv", as.is=T)
# remove NA data & add row names
data <- data[!is.na(data[, 3]), ]
row.names(data) <- data[, 1]
# read the tree
library(ape)
trees <- read.nexus("../data/trees.nexus")
# make a dataset in the make.simmap format for the focal taxa
library(geiger)
foo <- treedata(trees[[1]], data)
data <- foo[[2]]
regime.data <- data[, c(3,4)]
sim.data <- cbind(as.numeric(regime.data[,1]), as.numeric(regime.data[,2]))
row.names(sim.data) <- row.names(regime.data)
sim.data <- as.matrix(sim.data)
colnames(sim.data) <- c("winged", "wingless")
# now lets do a multiphylo object as well
new.trees <- vector("list", length=100)
for(i in 1:100){
new.trees[[i]] <- treedata(trees[[i]], data)[[1]]
}
class(new.trees) <- "multiPhylo"
# now clean up
rm(foo, i, trees, regime.data)
# do the ancestral state reconstructions
library(phytools)
matrix(c(0, 0, 1, 0), 2)
foo2 <- make.simmap(new.trees, sim.data, maxit=200000,
model = matrix(c(0, 0, 1, 0), 2), pi = c(1, 0))
matrix(c(0, 0, 1, 0), 2, 2)
foo2 <- make.simmap(new.trees, sim.data, maxit=200000,
model = matrix(c(0, 0, 1, 0), 2, 2), pi = c(1, 0))
foo2 <- make.simmap(new.trees, sim.data, maxit=200000,
model = matrix(c(0, 1, 1, 0), 2, 2), pi = c(1, 0))
foo2 <- make.simmap(new.trees, sim.data, maxit=200000,
model = matrix(c(0, 0, 1, 0), 2, 2), pi = c(1, 0))
