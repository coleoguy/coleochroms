print("unable to find 5 nonoverlapping trees")
successful[j] <- F
}
}
all.subtrees[[j]] <- new.trees
}
succesful
successful
new.trees <- list()
#simulate trees
library(geiger)
library(phytools)
trees <- list()
iterations <- 10
for(i in 1:iterations){
set.seed(i)
trees[[i]] <- drop.extinct(sim.bdtree(b=1, d=.5, stop="taxa", n=100, extinct=F))
}
class(trees) <- "multiPhylo"
#simulate continuous trait
cont.traits <- list()
for(i in 1:iterations){
set.seed(i)
foo <- sim.char(trees[[i]], par=.02)
foo2 <- as.vector(foo)
names(foo2) <- row.names(foo)
cont.traits[[i]] <- foo2
print(i)
}
#simulate a derived discrete trait with no relationship
disc.nocor <- list()
q <- list(rbind(c(-.01, .01), c(0, 0)))
for(i in 1:iterations){
test <- F
while(test == F){
foo <- sim.char(trees[[i]], par=q, model="discrete", root=1)
if(sum(foo == 1) > sum(foo == 2)){
test <- T
}
}
foo2 <- as.vector(foo)
names(foo2) <- row.names(foo)
disc.nocor[[i]] <- foo2
print(i)
}
rm(foo, foo2, i, q)
#get the subtrees that we will re-evolve the discrete trait on
all.subtrees <- list()
successful <- vector()
for(j in 1:iterations){
#run ace to get node values
foo <- ace(trees[[j]], x=cont.traits[[j]])[[2]]
#find the lower 50% nodes
nodes <- names(foo[order(foo)[1:50]])
#pick 11 nodes spread across the tree
nodes <- as.numeric(nodes[order(nodes)])[c(2,5,10,15,20,25,30,35,40,45,50)]
# get the subtrees these define
s.trees <- list()
for(i in 1:11){
split <- list()
split[[1]] <- nodes[i]
split[[2]] <- .001
names(split) <- c("node", "bp")
s.trees[[i]] <- splitTree(trees[[1]], split)[[2]]
}
tree.sizes <- vector()
for(i in 1:11){
tree.sizes[i] <- length(s.trees[[i]][[3]])
}
size.order <- order(tree.sizes)
new.trees <- list()
test <- F #do we have 5 subtrees that dont overlap
counter <- 1 #tree being evaluated
counter2 <- 1 #tree index for found trees
sampled.tips <- vector()
while(test == F){
if(sum(sampled.tips %in% s.trees[[size.order[counter]]][3]) == 0){
if(length(unlist(s.trees[[size.order[counter]]][3])) > 2){
new.trees[[counter2]] <- s.trees[[size.order[counter]]]
sampled.tips <- c(sampled.tips, unlist(new.trees[[counter2]][3]))
counter2 <- counter2 + 1
}
}
counter <- counter + 1
if(length(new.trees) == 5){
test = T
print("found 5 non-overlapping trees")
successful[j] <- T
}
if(counter == 11 & length(new.trees) != 5){
test = T
print("unable to find 5 nonoverlapping trees")
successful[j] <- F
}
}
all.subtrees[[j]] <- new.trees
}
par(mfcol=c(2,3))
foobar <- all.subtrees[[1]]
for(i in 1:5){plot(foobar[[i]])}
par(mfcol=c(2,3))
foobar <- all.subtrees[[2]]
for(i in 1:5){plot(foobar[[i]])}
#simulate trees
library(geiger)
library(phytools)
trees <- list()
iterations <- 10
for(i in 1:iterations){
set.seed(i)
trees[[i]] <- drop.extinct(sim.bdtree(b=1, d=.5, stop="taxa", n=100, extinct=F))
}
class(trees) <- "multiPhylo"
#simulate continuous trait
cont.traits <- list()
for(i in 1:iterations){
set.seed(i)
foo <- sim.char(trees[[i]], par=.02)
foo2 <- as.vector(foo)
names(foo2) <- row.names(foo)
cont.traits[[i]] <- foo2
print(i)
}
#simulate a derived discrete trait with no relationship
disc.nocor <- list()
q <- list(rbind(c(-.01, .01), c(0, 0)))
for(i in 1:iterations){
test <- F
while(test == F){
foo <- sim.char(trees[[i]], par=q, model="discrete", root=1)
if(sum(foo == 1) > sum(foo == 2)){
test <- T
}
}
foo2 <- as.vector(foo)
names(foo2) <- row.names(foo)
disc.nocor[[i]] <- foo2
print(i)
}
rm(foo, foo2, i, q)
#get the subtrees that we will re-evolve the discrete trait on
all.subtrees <- list()
successful <- vector()
for(j in 1:iterations){
#run ace to get node values
foo <- ace(trees[[j]], x=cont.traits[[j]])[[2]]
#find the lower 50% nodes
nodes <- names(foo[order(foo)[1:50]])
#pick 11 nodes spread across the tree
nodes <- as.numeric(nodes[order(nodes)])[c(2,5,10,15,20,25,30,35,40,45,50)]
# get the subtrees these define
s.trees <- list()
for(i in 1:11){
split <- list()
split[[1]] <- nodes[i]
split[[2]] <- .001
names(split) <- c("node", "bp")
s.trees[[i]] <- splitTree(trees[[1]], split)[[2]]
}
tree.sizes <- vector()
for(i in 1:11){
tree.sizes[i] <- length(s.trees[[i]][[3]])
}
size.order <- order(tree.sizes)
new.trees <- list()
test <- F #do we have 5 subtrees that dont overlap
counter <- 1 #tree being evaluated
counter2 <- 1 #tree index for found trees
sampled.tips <- vector()
while(test == F){
if(sum(sampled.tips %in% s.trees[[size.order[counter]]][3]) == 0){
if(length(unlist(s.trees[[size.order[counter]]][3])) > 2){
if(length(unlist(s.trees[[size.order[counter]]][3])) < 15){
new.trees[[counter2]] <- s.trees[[size.order[counter]]]
sampled.tips <- c(sampled.tips, unlist(new.trees[[counter2]][3]))
counter2 <- counter2 + 1
}
}
counter <- counter + 1
if(length(new.trees) == 5){
test = T
print("found 5 non-overlapping trees")
successful[j] <- T
}
if(counter == 11 & length(new.trees) != 5){
test = T
print("unable to find 5 nonoverlapping trees")
successful[j] <- F
}
}
all.subtrees[[j]] <- new.trees
}
}
successful
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
pexp(1:10, rate = 1, lower.tail = TRUE, log.p = FALSE)
pexp(1:100, rate = 1, lower.tail = TRUE, log.p = FALSE)
pexp(1:100, rate = 1, lower.tail = TRUE, log.p = FALSE) > .999
min(pexp(1:100, rate = 1, lower.tail = TRUE, log.p = FALSE) > .999)
min(which(pexp(1:100, rate = 1, lower.tail = TRUE, log.p = FALSE) > .999 == T))
foo <- pexp(1:100, rate = 1, lower.tail = TRUE, log.p = FALSE) > .999
min(which(foo == T))
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
input$select <- 3
input <- vector()
input$select <- 3
c("Normal", "Exponential", "Gamma", "Logistic")[input$select]
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
plogis(-200:200, location = 0, scale = 1*0.551328895)
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
plogis(-20:20, location = 0, scale = .1*0.551328895)
qlogis(.05, location = 0, scale = .1*0.551328895, lower.tail = TRUE, log.p = FALSE)
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
help(abline)
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
shiny::runApp('~/Desktop/mypack/GIT/evobir/inst/dist.model')
setwd("~/Desktop/Dropbox/papers/chrom.num/data and analysis/data/fig1")
data <- read.csv("chrom.nums.csv", header=F, as.is=T)
Even <- function(x){
if(x/2 == round(x/2)){
return(T)
}else{
return(F)
}
}
data<- data[,c(1:3,5)]
for(i in 1:4537){
if(Even(data[i,4])){
data[i,4] <- (data[i,4]-2)/2
}else{
data[i,4] <- (data[i,4]-1)/2
}
}
fams <- unique(data[,1])
ade <- c("Dytiscidae", "Carabidae", "Gyrinidae", "Haliplidae", "Hygrobiidae", "Noteridae", "Trachypachidae")
pol <- fams[!fams %in% ade]
pol <- pol[c(1:4,6:37,40:52)]
ade.data <- data[data[,1] %in% ade,]
pol.data <- data[data[,1] %in% pol,]
ade.foo <- as.data.frame(table(ade.data[,4]))
pol.foo <- as.data.frame(table(pol.data[,4]))
#first switch levels to numerics
ade.foo[,1] <- as.numeric(levels(ade.foo[,1]))
pol.foo[,1] <- as.numeric(levels(pol.foo[,1]))
finals <- matrix(,34,3)
finals[,1] <- 1:34
for(i in 1:34){
if(i %in% ade.foo[,1]) finals[i,2] <- ade.foo[ade.foo[,1] == i,2]
if(i %in% pol.foo[,1]) finals[i,3] <- pol.foo[pol.foo[,1] == i,2]
}
colnames(finals) <- c("haploid.num", "ade", "pol")
foo <- rbind(finals[,2], finals[,3])
foo[2,3] <- 4
foo[1,31] <- 3
foo[2,31] <- 2
foo <- foo[,3:31]
# lets get rid of any NA values
foo[1, which(is.na(foo[1,]))] <- 0
foo[2, which(is.na(foo[2,]))] <- 0
finals[3,1] <- "1-3"
finals[31,1] <- "31-34"
par(mar=c(3,3,1,1))
barplot(foo, ylim=c(0,1000), cex.axis=.6, cex.names=.7, border="black",
las=2, col=c("black", "white"), ylab="Count", width=.77, space=.3, beside=F,
cex.lab=.7)
barplot(foo, ylim=c(0,1000), cex.axis=.6, cex.names=.7, border="black",
las=2, col=c("black", "white"), ylab="Count", width=.77, space=.3, beside=T,
cex.lab=.7)
View(foo)
counts <- table(mtcars$vs, mtcars$gear)
counts
barplot(counts, main="Car Distribution by Gears and VS",
xlab="Number of Gears", col=c("darkblue","red"),
legend = rownames(counts), beside=TRUE)
foo
foo2 <- as.matrix(foo)
barplot(foo, ylim=c(0,1000), cex.axis=.6, cex.names=.7, border="black",
las=2, col=c("black", "white"), ylab="Count", width=.77, space=.3, beside=T,
cex.lab=.7)
foo2 <- t(foo)
barplot(foo, ylim=c(0,1000), cex.axis=.6, cex.names=.7, border="black",
las=2, col=c("black", "white"), ylab="Count", width=.77, space=.3, beside=T,
cex.lab=.7)
barplot(foo2, ylim=c(0,1000), cex.axis=.6, cex.names=.7, border="black",
las=2, col=c("black", "white"), ylab="Count", width=.77, space=.3, beside=T,
cex.lab=.7)
barplot(foo2, ylim=c(0,1000), cex.axis=.6, cex.names=.7, border="black",
las=2, col=c("black", "white"), ylab="Count", beside=T,
cex.lab=.7)
barplot(foo2, ylim=c(0,1000), cex.axis=.6, cex.names=.7, border="black",
las=2, col=c("black", "white"), ylab="Count", space=.3, beside=T,
cex.lab=.7)
barplot(foo2, ylim=c(0,1000), cex.axis=.6, cex.names=.7, border="black",
las=2, col=c("black", "white"), ylab="Count", space=1, beside=T,
cex.lab=.7)
barplot(foo2, ylim=c(0,1000), cex.axis=.6, cex.names=.7, border="black",
las=2, col=c("black", "white"), ylab="Count", beside=T,
cex.lab=.7)
barplot(foo, ylim=c(0,1000), cex.axis=.6, cex.names=.7, border="black",
las=2, col=c("black", "white"), ylab="Count", beside=T,
cex.lab=.7)
mtext(text="Chromosome Number", side=1, line=1, cex=.8)
axis(1, at=1:29-.3, labels=finals[3:31,1], tick = F, cex.axis=.45, line=-1)
points(x=rep(22,2), y=c(900,850),pch=c(0,15), cex=.9)
text(x=rep(22,2), y=c(900,850),labels=c("Polyphaga", "Adephaga"), pos=4, cex=.7)
axis(1, at=1:29, labels=finals[3:31,1], tick = F, cex.axis=.45, line=-1)
axis(1, at=10:39, labels=finals[3:31,1], tick = F, cex.axis=.45, line=-1)
axis(1, at=10:40, labels=finals[3:31,1], tick = F, cex.axis=.45, line=-1)
axis(1, at=8:40, labels=finals[3:31,1], tick = F, cex.axis=.45, line=-1)
31-3
40-8
40-12
axis(1, at=12:40, labels=finals[3:31,1], tick = F, cex.axis=.45, line=-1)
axis(1, at=52:80, labels=finals[3:31,1], tick = F, cex.axis=.45, line=-1)
axis(1, at=62:90, labels=finals[3:31,1], tick = F, cex.axis=.45, line=-1)
axis(1, at=60:88, labels=finals[3:31,1], tick = F, cex.axis=.45, line=-1)
barplot(foo, ylim=c(0,1000), cex.axis=.6, cex.names=.7, border="black",
las=2, col=c("black", "white"), ylab="Count", beside=T,
cex.lab=.7)
mtext(text="Chromosome Number", side=1, line=1, cex=.8)
axis(1, at=60:88, labels=finals[3:31,1], tick = F, cex.axis=.45, line=-1)
View(finals)
finals <- [3:31,1]
finals <- finals[3:31,1]
help(seq)
seq(1:88, length.out=29)
seq(from=1, to=88, length.out=29)
spots <- seq(from=1, to=88, length.out=29)
barplot(foo, ylim=c(0,1000), cex.axis=.6, cex.names=.7, border="black",
las=2, col=c("black", "white"), ylab="Count", beside=T,
cex.lab=.7)
mtext(text="Chromosome Number", side=1, line=1, cex=.8)
axis(1, at=spots, labels=finals, tick = F, cex.axis=.45, line=-1)
finals
spots <- seq(from=2, to=86, length.out=29)
barplot(foo, ylim=c(0,1000), cex.axis=.6, cex.names=.7, border="black",
las=2, col=c("black", "white"), ylab="Count", beside=T,
cex.lab=.7)
mtext(text="Chromosome Number", side=1, line=1, cex=.8)
axis(1, at=spots, labels=finals, tick = F, cex.axis=.45, line=-1)
points(x=rep(22,2), y=c(900,850),pch=c(0,15), cex=.9)
text(x=rep(22,2), y=c(900,850),labels=c("Polyphaga", "Adephaga"), pos=4, cex=.7)
points(x=rep(75,2), y=c(900,850),pch=c(0,15), cex=.9)
text(x=rep(75,2), y=c(900,850),labels=c("Polyphaga", "Adephaga"), pos=4, cex=.7)
barplot(foo, ylim=c(0,1000), cex.axis=.6, cex.names=.7, border="black",
las=2, col=c("black", "white"), ylab="Count", beside=T,
cex.lab=.7)
mtext(text="Chromosome Number", side=1, line=1, cex=.8)
axis(1, at=spots, labels=finals, tick = F, cex.axis=.45, line=-1)
points(x=rep(75,2), y=c(900,850),pch=c(0,15), cex=.9)
text(x=rep(75,2), y=c(900,850),labels=c("Polyphaga", "Adephaga"), pos=4, cex=.7)
setwd("~/Desktop/Dropbox/papers/chrom.num/data and analysis/data/fig1")
data <- read.csv("chrom.nums.csv", header=F, as.is=T)
Even <- function(x){
if(x/2 == round(x/2)){
return(T)
}else{
return(F)
}
}
data<- data[,c(1:3,5)]
for(i in 1:4537){
if(Even(data[i,4])){
data[i,4] <- (data[i,4]-2)/2
}else{
data[i,4] <- (data[i,4]-1)/2
}
}
fams <- unique(data[,1])
ade <- c("Dytiscidae", "Carabidae", "Gyrinidae", "Haliplidae", "Hygrobiidae", "Noteridae", "Trachypachidae")
pol <- fams[!fams %in% ade]
pol <- pol[c(1:4,6:37,40:52)]
ade.data <- data[data[,1] %in% ade,]
pol.data <- data[data[,1] %in% pol,]
ade.foo <- as.data.frame(table(ade.data[,4]))
pol.foo <- as.data.frame(table(pol.data[,4]))
#first switch levels to numerics
ade.foo[,1] <- as.numeric(levels(ade.foo[,1]))
pol.foo[,1] <- as.numeric(levels(pol.foo[,1]))
finals <- matrix(,34,3)
finals[,1] <- 1:34
for(i in 1:34){
if(i %in% ade.foo[,1]) finals[i,2] <- ade.foo[ade.foo[,1] == i,2]
if(i %in% pol.foo[,1]) finals[i,3] <- pol.foo[pol.foo[,1] == i,2]
}
colnames(finals) <- c("haploid.num", "ade", "pol")
foo <- rbind(finals[,2], finals[,3])
foo[2,3] <- 4
foo[1,31] <- 3
foo[2,31] <- 2
foo <- foo[,3:31]
# lets get rid of any NA values
foo[1, which(is.na(foo[1,]))] <- 0
foo[2, which(is.na(foo[2,]))] <- 0
finals[3,1] <- "1-3"
finals[31,1] <- "31+"
finals <- finals[3:31,1]
par(mar=c(3,3,1,1))
foo2 <- t(foo)
spots <- seq(from=2, to=86, length.out=29)
barplot(foo, ylim=c(0,1000), cex.axis=.6, cex.names=.7, border="black",
las=2, col=c("black", "white"), ylab="Count", beside=T,
cex.lab=.7)
mtext(text="Chromosome Number", side=1, line=1, cex=.8)
axis(1, at=spots, labels=finals, tick = F, cex.axis=.45, line=-1)
points(x=rep(75,2), y=c(900,850),pch=c(0,15), cex=.9)
text(x=rep(75,2), y=c(900,850),labels=c("Polyphaga", "Adephaga"), pos=4, cex=.7)
barplot(foo, ylim=c(0,1000), cex.axis=.6, cex.names=.7, border="black",
las=2, col=c("black", "white"), ylab="Count", beside=T,
cex.lab=.7)
par(mar=c(3,3,3,1))
foo2 <- t(foo)
spots <- seq(from=2, to=86, length.out=29)
barplot(foo, ylim=c(0,1000), cex.axis=.6, cex.names=.7, border="black",
las=2, col=c("black", "white"), ylab="Count", beside=T,
cex.lab=.7)
par(mar=c(3,3,1,2))
foo2 <- t(foo)
spots <- seq(from=2, to=86, length.out=29)
barplot(foo, ylim=c(0,1000), cex.axis=.6, cex.names=.7, border="black",
las=2, col=c("black", "white"), ylab="Count", beside=T,
cex.lab=.7)
par(mar=c(3,3,1,4))
foo2 <- t(foo)
spots <- seq(from=2, to=86, length.out=29)
barplot(foo, ylim=c(0,1000), cex.axis=.6, cex.names=.7, border="black",
las=2, col=c("black", "white"), ylab="Count", beside=T,
cex.lab=.7)
par(mar=c(3,2,1,1))
foo2 <- t(foo)
spots <- seq(from=2, to=86, length.out=29)
barplot(foo, ylim=c(0,1000), cex.axis=.6, cex.names=.7, border="black",
las=2, col=c("black", "white"), ylab="Count", beside=T,
cex.lab=.7)
par(mar=c(1,3,1,1))
foo2 <- t(foo)
spots <- seq(from=2, to=86, length.out=29)
barplot(foo, ylim=c(0,1000), cex.axis=.6, cex.names=.7, border="black",
las=2, col=c("black", "white"), ylab="Count", beside=T,
cex.lab=.7)
barplot(foo, ylim=c(0,1000), cex.axis=.6, cex.names=.7, border="black",
las=2, col=c("black", "white"), ylab="Count", beside=T,
cex.lab=.7)
mtext(text="Chromosome Number", side=1, line=1, cex=.8)
axis(1, at=spots, labels=finals, tick = F, cex.axis=.45, line=-1)
points(x=rep(75,2), y=c(900,850),pch=c(0,15), cex=.9)
text(x=rep(75,2), y=c(900,850),labels=c("Polyphaga", "Adephaga"), pos=4, cex=.7)
mtext(text="Chromosome Number", side=1, line=1, cex=.7)
mtext(text="Count", side=2,line=1,cex=.7)
mtext(text="Count", side=2,line=2,cex=.7)
barplot(foo, ylim=c(0,1000), cex.axis=.6, cex.names=.7, border="black",
las=2, col=c("black", "white"), ylab="", beside=T,
cex.lab=.7)
mtext(text="Chromosome Number", side=1, line=1, cex=.7)
mtext(text="Count", side=2,line=2,cex=.7)
axis(1, at=spots, labels=finals, tick = F, cex.axis=.45, line=-1)
points(x=rep(75,2), y=c(900,850),pch=c(0,15), cex=.9)
text(x=rep(75,2), y=c(900,850),labels=c("Polyphaga", "Adephaga"), pos=4, cex=.7)
barplot(foo, ylim=c(0,1000), cex.axis=.6, cex.names=.7, border="black",
las=2, col=c("black", "white"), ylab="", beside=T,
cex.lab=.7)
mtext(text="Chromosome Number", side=1, line=1, cex=.7)
mtext(text="Count", side=2,line=2.3,cex=.7)
axis(1, at=spots, labels=finals, tick = F, cex.axis=.45, line=-1)
points(x=rep(75,2), y=c(900,850),pch=c(0,15), cex=.9)
text(x=rep(75,2), y=c(900,850),labels=c("Polyphaga", "Adephaga"), pos=4, cex=.7)
