set.seed(1)
ster.A <- rnorm(15, mean = 23, sd = 5)
ster.B <- rnorm(15, mean = 30, sd = 5)
ster.A <- round(rnorm(15, mean = 23, sd = 5))
ster.A <- round(rnorm(15, mean = 23, sd = 5))
ster.B <- round(rnorm(15, mean = 30, sd = 5))
dat <- data.frame(ster.A,ster.B)
t.test(dat$ster.A,dat$ster.B)
set.seed(1)
ster.A <- round(rnorm(15, mean = 23, sd = 5))
ster.B <- round(rnorm(15, mean = 29, sd = 5))
dat <- data.frame(ster.A,ster.B)
t.test(dat$ster.A,dat$ster.B)
set.seed(1)
ster.A <- round(rnorm(15, mean = 23, sd = 5))
ster.B <- round(rnorm(15, mean = 28, sd = 5))
dat <- data.frame(ster.A,ster.B)
t.test(dat$ster.A,dat$ster.B)
set.seed(1)
ster.A <- round(rnorm(15, mean = 23, sd = 5))
ster.B <- round(rnorm(15, mean = 27, sd = 5))
dat <- data.frame(ster.A,ster.B)
t.test(dat$ster.A,dat$ster.B)
set.seed(1)
ster.A <- round(rnorm(15, mean = 23, sd = 5))
ster.B <- round(rnorm(15, mean = 26, sd = 5))
dat <- data.frame(ster.A,ster.B)
t.test(dat$ster.A,dat$ster.B)
set.seed(2)
ster.A <- round(rnorm(15, mean = 23, sd = 5))
ster.B <- round(rnorm(15, mean = 26, sd = 5))
dat <- data.frame(ster.A,ster.B)
t.test(dat$ster.A,dat$ster.B)
set.seed(2)
ster.A <- round(rnorm(15, mean = 23, sd = 5))
ster.B <- round(rnorm(15, mean = 27, sd = 5))
dat <- data.frame(ster.A,ster.B)
t.test(dat$ster.A,dat$ster.B)
set.seed(2)
ster.A <- round(rnorm(15, mean = 23, sd = 5))
ster.B <- round(rnorm(15, mean = 28, sd = 5))
dat <- data.frame(ster.A,ster.B)
t.test(dat$ster.A,dat$ster.B)
set.seed(3)
ster.A <- round(rnorm(15, mean = 23, sd = 5))
ster.B <- round(rnorm(15, mean = 28, sd = 5))
dat <- data.frame(ster.A,ster.B)
t.test(dat$ster.A,dat$ster.B)
set.seed(3)
ster.A <- round(rnorm(15, mean = 23, sd = 5))
ster.B <- round(rnorm(15, mean = 27, sd = 5))
dat <- data.frame(ster.A,ster.B)
t.test(dat$ster.A,dat$ster.B)
set.seed(3)
ster.A <- round(rnorm(15, mean = 23, sd = 5))
ster.B <- round(rnorm(15, mean = 27, sd = 5))
dat <- data.frame(ster.A,ster.B)
t.test(dat$ster.A,dat$ster.B)
setwd("~/Desktop/github/coleoguy.github.io/teaching/expdes/tests")
write.csv(dat,file="phone-microbes.csv", row.names = F)
dat <- read.csv("phone-microbes.csv")
t.test(dat$ster.A,dat$ster.B)
mean(dat$ster.A)
View(dat)
t.test(x=dat$ster.A, y=dat$ster.B)
dat <- matrix(c(475,340,459,269), 2, 2)
chisq.test(dat)
chisq.test(dat, simulate.p.value = T)
chisq.test(dat, simulate.p.value = T)
chisq.test(dat, simulate.p.value = T)
chisq.test(dat, simulate.p.value = T)
chisq.test(dat)
chisq.test(dat, simulate.p.value = T, B=1000000)
chisq.test(dat, simulate.p.value = T, B=1000000)
strain42 <- rpois(100, 328)
hist(strain42)
set.seed(1)
strain42 <- rpois(100, 328)
strain76 <- rpois(100, 300)
t.test(strain42,strain76)
strain42 <- rpois(100, 318)
set.seed(1)
strain42 <- rpois(100, 318)
strain76 <- rpois(100, 300)
t.test(strain42,strain76)
set.seed(1)
strain42 <- rpois(100, 308)
strain76 <- rpois(100, 300)
t.test(strain42,strain76)
set.seed(1)
strain42 <- rpois(50, 308)
strain76 <- rpois(50, 300)
t.test(strain42,strain76)
set.seed(1)
strain42 <- rpois(50, 308)
strain76 <- rpois(50, 300)
t.test(strain42,strain76)
set.seed(1)
strain42 <- rpois(50, 308)
strain76 <- rpois(50, 300)
t.test(strain42,strain76)
set.seed(1)
strain42 <- rpois(50, 308)
strain76 <- rpois(50, 300)
t.test(strain42,strain76)
set.seed(1)
strain42 <- rpois(50, 308)
strain76 <- rpois(50, 300)
t.test(strain42,strain76)
set.seed(1)
strain42 <- rpois(50, 308)
strain76 <- rpois(50, 300)
t.test(strain42,strain76)
write.csv("crickets.csv", row.names = F)
crickets <- data.frame(strain41,strain76)
crickets <- data.frame(strain42,strain76)
set.seed(1)
strain42 <- rpois(50, 308)
strain76 <- rpois(50, 300)
t.test(strain42,strain76)
crickets <- data.frame(strain42,strain76)
write.csv("crickets.csv", row.names = F)
dat <- read.csv("cr")
write.csv(crickets, "crickets.csv", row.names = F)
set.seed(1)
strain42 <- rpois(50, 308)
strain76 <- rpois(50, 300)
t.test(strain42,strain76)
crickets <- data.frame(strain42,strain76)
write.csv(crickets, "crickets.csv", row.names = F)
dat <- read.csv("crickets.csv")
View(dat)
t.test(dat$strain42,dat$strain76)
emp.dif <- mean(dat$strain42) - mean(dat$strain76)
View(dat)
set.seed(1)
strain42 <- rpois(50, 308)
strain76 <- rpois(50, 300)
rep(c("strain42","strain76"),each=50)
crickets <- data.frame(c(strain42,strain76),
rep(c("strain42","strain76"),each=50))
View(crickets)
colnames(crickets) <- c("strain42","strain76")
write.csv(crickets, "crickets.csv", row.names = F)
dat <- read.csv("crickets.csv")
colnames(crickets) <- c("offspring","strain")
write.csv(crickets, "crickets.csv", row.names = F)
dat <- read.csv("crickets.csv")
t.test(dat$offspring ~ dat$strain)
emp.dif <- mean(dat$offspring[dat$strain=="strain42"]) -
mean(dat$offspring[dat$strain=="strain76"])
null.dist <- c()
null.dist <- c()
for(i in 1:1000){
newvals <- sample(dat$offspring)
dif[i] <- mean(newvals[1:50]) - mean(newvals[51:100])
}
null.dist <- c()
for(i in 1:1000){
newvals <- sample(dat$offspring)
null.dist[i] <- mean(newvals[1:50]) - mean(newvals[51:100])
}
plot(null.dist)
hist(null.dist)
mean(null.dist)
emp.dif
null.dist>=emp.dif
sum(null.dist>=emp.dif)/1000
mean(null.dist)
emp.diff
sum(null.dist>=emp.dif)/1000
mean(null.dist)
emp.dif
sum(null.dist>=emp.dif)/1000
binom.test(1, 68, p=.01)
rbinom(10, 68, p=.01)
rbinom(10, 68, p=.01)
rbinom(10, 68, p=.001)
rbinom(10, 68, p=.001)
foo <- rbinom(1000, 68, p=.001)
sum(foo>=1)
sum(foo>=1)/1000
foo <- rbinom(1000, 68, p=.0007)
sum(foo>=1)/1000
foo <- rbinom(1000, 68, p=.001)
sum(foo>=1)/1000
foo <- rbinom(10000, 68, p=.001)
sum(foo>=1)/10000
foo <- rbinom(10000, 68, p=.0008)
sum(foo>=1)/10000
foo <- rbinom(10000, 68, p=.0008)
sum(foo>=1)/10000
foo <- rbinom(10000, 68, p=.0008)
sum(foo>=1)/10000
foo <- rbinom(10000, 68, p=.0008)
sum(foo>=1)/10000
foo <- rbinom(10000, 68, p=.0008)
sum(foo>=1)/10000
foo <- rbinom(10000, 68, p=.0001)
sum(foo>=1)/10000
foo <- rbinom(10000, 68, p=.001)
sum(foo>=1)/10000
sum(null.dist>=emp.dif)/1000
View(dat)
pvals <- c()
for(j in 1:10000){
print(j)
null.dist <- c()
for(i in 1:1000){
newvals <- sample(dat$offspring)
null.dist[i] <- mean(newvals[1:50]) - mean(newvals[51:100])
}
pvals[j] <- sum(null.dist>=emp.dif)/1000
}
pvals <- c()
for(j in 1:1000){
print(j)
null.dist <- c()
for(i in 1:1000){
newvals <- sample(dat$offspring)
null.dist[i] <- mean(newvals[1:50]) - mean(newvals[51:100])
}
pvals[j] <- sum(null.dist>=emp.dif)/1000
}
range(pvals)
pvals <- c()
nulldistmeans <- c()
pvals <- c()
nulldistmeans <- c()
for(j in 1:1000){
if(j %% 100 == 0){
print(j)
}
null.dist <- c()
for(i in 1:1000){
newvals <- sample(dat$offspring)
null.dist[i] <- mean(newvals[1:50]) - mean(newvals[51:100])
}
nulldistmeans[j] <- mean(null.dist)
pvals[j] <- sum(null.dist>=emp.dif)/1000
}
range(pvals)
#.005-.027
#.005-.031
range(nulldistmeans)
pvals <- c()
nulldistmeans <- c()
for(j in 1:1000){
if(j %% 100 == 0){
print(j)
}
null.dist <- c()
for(i in 1:1000){
newvals <- sample(dat$offspring)
null.dist[i] <- mean(newvals[1:50]) - mean(newvals[51:100])
}
nulldistmeans[j] <- mean(null.dist)
pvals[j] <- sum(null.dist>=emp.dif)/1000
}
range(pvals)
#.005-.027
#.005-.031
range(nulldistmeans)
# -.325 0.248
pvals <- c()
nulldistmeans <- c()
for(j in 1:1000){
if(j %% 100 == 0){
print(j)
}
null.dist <- c()
for(i in 1:1000){
newvals <- sample(dat$offspring)
null.dist[i] <- mean(newvals[1:50]) - mean(newvals[51:100])
}
nulldistmeans[j] <- mean(null.dist)
pvals[j] <- sum(null.dist>=emp.dif)/1000
}
range(pvals)
#.005-.027
#.005-.031
#.005-.0321
range(nulldistmeans)
pvals <- c()
nulldistmeans <- c()
for(j in 1:1000){
if(j %% 100 == 0){
print(j)
}
null.dist <- c()
for(i in 1:1000){
newvals <- sample(dat$offspring)
null.dist[i] <- mean(newvals[1:50]) - mean(newvals[51:100])
}
nulldistmeans[j] <- mean(null.dist)
pvals[j] <- sum(null.dist>=emp.dif)/1000
}
range(pvals)
#.005-.027
#.005-.031
#.005-.0321
#.006-.029
range(nulldistmeans)
pvals <- c()
nulldistmeans <- c()
for(j in 1:10000){
if(j %% 100 == 0){
print(j)
}
null.dist <- c()
for(i in 1:1000){
newvals <- sample(dat$offspring)
null.dist[i] <- mean(newvals[1:50]) - mean(newvals[51:100])
}
nulldistmeans[j] <- mean(null.dist)
pvals[j] <- sum(null.dist>=emp.dif)/1000
}
range(pvals)
#.005-.027
#.005-.031
#.005-.032
#.006-.029
#.004-.031
#.004-.033
range(nulldistmeans)
emp.dif
1/1000
.001*100
binom.test(32,80)
binom.test(32,80,alternative="l")
dat <- matrix(c(475,340,459,269), 2, 2)
chisq.test(dat)
dat <- read.csv("phone-microbes.csv")
t.test(x=dat$ster.A, y=dat$ster.B)
dat <- read.csv("phone-microbes.csv")
t.test(x=dat$ster.A, y=dat$ster.B)
dat <- read.csv("crickets.csv")
emp.dif <- mean(dat$offspring[dat$strain=="strain42"]) -
mean(dat$offspring[dat$strain=="strain76"])
null.dist <- c()
for(i in 1:1000){
newvals <- sample(dat$offspring)
null.dist[i] <- mean(newvals[1:50]) - mean(newvals[51:100])
}
mean(null.dist)
emp.dif
sum(null.dist>=emp.dif)/1000
setwd("~/Desktop/github/coleochroms/analyses/scripts")
library(chromePlus)
library(coda)
library(diversitree)
trees <- list()
for (i in 1:100) {
trees[[i]] <-
read.tree(paste("../data/carabidae/Carabidae", i, ".tree", sep = ""))
}
chroms <- read.csv("../data/hap.auto.csv", as.is = T)
# state 1 is winged
#lets prune trees
library(geiger)
row.names(chroms) <- chroms$name
# here we scale our trees to unit length and store their orginal depth
trees.p <- list()
scaler <- c()
for (i in 1:100) {
print(i)
trees.p[[i]] <- treedata(trees[[i]], chroms)[[1]]
scaler[i] <- max(branching.times(trees.p[[i]]))
trees.p[[i]]$edge.length <- trees.p[[i]]$edge.length / scaler[i]
}
#here we match up our tip data and our
trees <- trees.p
class(trees) <- "multiPhylo"
x <- row.names(treedata(trees[[1]], chroms)[[2]])
chroms <- chroms[chroms$name %in% x, ]
rm(trees.p, i, x)
range(chroms$chrom.num)
# we will work in parallele to speed things up
results <- vector(length = 100, mode = "list")
library(doMC)
# this is the number of cores to use
registerDoMC(7)
iter.full <- 200
# now we set up our chrom matrix
wingstate <- as.numeric(chroms$wings.present >= .5)
current.chroms <- chroms
current.chroms$wings.present <- wingstate
chrom.mat <- datatoMatrix(current.chroms, range = c(6, 32), hyper = T)
# we need to supply the w parameter for the diversitree mcmc function
# these values come from a sample of a run of 500 generations on each
# of 5 randomly chosen trees
# new.w <- diff(sapply(foo[2:6], quantile, c(.05, .95))) # wo poly
# new.w <- diff(sapply(foo[2:8], quantile, c(.05, .95))) # w poly
# This stores the result for the w parameter for the run with polyploidy
new.w <-
c(2.838092,
4.167098,
4.646785,
4.640986,
0.8953486,
2.263753,
0.5526955)
# we use a broad prior
prior <- make.prior.exponential(2)
x <- foreach (i = 1:length(trees)) %dopar% {
# here we just create our likelihood function
lk.mk <- make.mkn(trees[[i]],
states = chrom.mat,
k = ncol(chrom.mat),
strict = F,
control = list(method = "ode"))
# this version creates a one way model where wings can
# not be regained and allows for polyploidy
con.lk.mk <- constrainMkn(
data = chrom.mat,
lik = lk.mk,
hyper = T,
polyploidy = F,
verbose = F,
oneway = T,
constrain = list(drop.demi = T, drop.poly = F))
print(paste("Working on dataset", i))
results[[i]] <- diversitree::mcmc(
con.lk.mk,
x.init = runif(7, min = 0, max = 10),
prior = prior,
upper = 100,
w = new.w,
print.every = 10,
nsteps = iter.full)
}
# here we discard the first 100 generations as burnin
# we also convert this to rates in millions of years
post.sample <- x[[1]][101:200, 2:8] / scaler[1]
for (i in 2:length(trees)) {
post.sample <- rbind(post.sample,
x[[i]][101:200, 2:8] / scaler[i])
}
# save our results state 1 wings present
View(post.sample)
bar <- data.frame(
c(post.sample[, 3] - post.sample[, 1],
post.sample[, 4] - post.sample[, 2],
post.sample[, 6] - post.sample[, 5],
rowMeans(post.sample[, c(3, 4, 6)]) - rowMeans(post.sample[, c(1, 2, 5)])),
c(rep("fission", 10000),
rep("fusion", 10000),
rep("wgd", 10000),
rep("delta.mean.rate", 10000)))
colnames(bar) <- c("rate", "type")
View(bar)
plot(density(bar$rate[bar$type=="fission"]))
plot(density(bar$rate[bar$type=="fusion"]))
plot(density(bar$rate[bar$type=="fission"]))
plot(density(bar$rate[bar$type=="wgd"]))
write.csv(post.sample, file="wingless.wpoly.full.csv")
# This stores the result for the w parameter for the run with no polyploidy
new.w <- c(3.47425, 3.753301, 4.987116, 5.412818, 0.4839324)
x <- foreach (i = 1:length(trees)) %dopar% {
# here we just create our likelihood function
lk.mk <- make.mkn(
trees[[i]],
states = chrom.mat,
k = ncol(chrom.mat),
strict = F,
control = list(method = "ode")
)
# this version creates a one way model where wings can
# not be regained and does not allow for polyploidy
con.lk.mk <- constrainMkn(
data = chrom.mat,
lik = lk.mk,
hyper = T,
polyploidy = F,
verbose = F,
oneway = T,
constrain = list(drop.demi = T, drop.poly = T)
)
# we use a broad prior
print(paste("Working on dataset", i))
results[[i]] <- diversitree::mcmc(
con.lk.mk,
x.init = runif(5, min = 0, max = 10),
prior = prior,
upper = 100,
w = new.w,
print.every = 10,
nsteps = iter.full
)
}
# here we discard the first 100 generations as burnin
# we also convert this to rates in millions of years
post.sample <- x[[1]][101:200, 2:6] / scaler[1]
for (i in 2:length(trees)) {
post.sample <- rbind(post.sample,
x[[i]][101:200, 2:6] / scaler[i])
}
# save our results state 1 wings present
write.csv(post.sample, file="wingless.wopoly.full.csv")
bar <- data.frame(
c(
post.sample[, 3] - post.sample[, 1],
post.sample[, 4] - post.sample[, 2],
rowMeans(post.sample[, c(3, 4)]) - rowMeans(post.sample[, c(1, 2)])
),
c(
rep("fission", 10000),
rep("fusion", 10000),
rep("delta.mean.rate", 10000)
)
)
colnames(bar) <- c("rate", "type")
