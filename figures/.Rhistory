group.effect <- as.numeric(groups)
group.effect[group.effect==2] <- 3
group.effect[group.effect==1] <- 0
temp <- runif(100, -5, 5)
groups <- as.factor(sample(c("A","B"), 100, replace = T))
group.effect <- as.numeric(groups)
group.effect[group.effect==2] <- 3
group.effect[group.effect==1] <- 0
temp <- runif(100, -5, 5)
tl <- rnorm(100, mean=2, sd = .8) +
rnorm(100, mean=temp, sd = 1) +
rnorm(100, mean= group.effect, sd=.8)
plot(tl ~ temp)
groups
as.numeric(groups)
c("blue", "red")[1]
c("blue", "red")[2]
c("blue", "red")[c(1,1,1,2)]
plot(tl ~ temp, col= c("blue", "red")[as.numeric(groups)], pch=16)
fit <- lme(tl ~ temp, random = ~1|groups)
library(nlme)
fit <- lme(tl ~ temp, random = ~1|groups)
summary(fit)
fit <- glm(tl ~ temp)
summary(fit)
fit <- glm(tl ~ temp + groups)
summary(fit)
rnorm(100, mean= group.effect, sd=.8)
hist(rnorm(100, mean= group.effect, sd=.8))
log(.000000000000000000000000001)
log(.000000000000000000000000000000000000000000000000000000000000000001)
log(.00000000000000000000000000000000000000001)
log(.00000001)
log(.001)
log(.1)
log(1)
log(5)
14768/2
data(iris)
head(iros)
head(iris)
head(iris)
knitr::opts_chunk$set(echo = TRUE)
pca <- prcomp(iris[,1:4])
install.packages("pwr")
library(pwr)
help(pwr.t.test)
round(seq(from=4, to=200,
length.out = 100))
n <- round(seq(from=4, to=200,
length.out = 100))
d <- .2
sig.level <- .05
power <- .8
i <- 1
pwr.t.test(n=n[i], d=d, sig.level = sig.level, power=power)
pwr.t.test(n=n[i], d=d, sig.level = sig.level)
pwr.t.test(n=n[i], d=d, sig.level = sig.level)->foo
power <- c()
library(pwr)
n <- round(seq(from=4, to=200,
length.out = 100))
d <- .2
sig.level <- .05
power <- c()
for(i 1:100){
power[i] <- pwr.t.test(n=n[i], d=d,
sig.level = sig.level)$power
}
pwr.t.test(n=n[i], d=d,
sig.level = sig.level)$power
library(pwr)
n <- round(seq(from=4, to=200,
length.out = 100))
d <- .2
sig.level <- .05
power <- c()
for(i in 1:100){
power[i] <- pwr.t.test(n=n[i], d=d,
sig.level = sig.level)$power
}
plot(power~n)
library(pwr)
n <- round(seq(from=4, to=200,
length.out = 100))
d <- .9
sig.level <- .05
power <- c()
for(i in 1:100){
power[i] <- pwr.t.test(n=n[i], d=d,
sig.level = sig.level)$power
}
plot(power~n)
# lets create 200 toy genomes with 4,000 SNPs
dat <- matrix(NA, 200, 4000)
runif(1, min = .5, max=.95)
runif(1, min = .5, max=.95)
runif(1, min = .5, max=.95)
runif(1, min = .5, max=.95)
runif(1, min = .5, max=.95)
runif(1, min = .5, max=.95)
runif(1, min = .5, max=.95)
runif(1, min = .5, max=.95)
runif(1, min = .5, max=.95)
runif(1, min = .5, max=.95)
runif(1, min = .5, max=.95)
runif(1, min = .5, max=.95)
runif(1, min = .5, max=.95)
runif(1, min = .5, max=.95)
runif(1, min = .5, max=.95)
runif(1, min = .5, max=.95)
runif(1, min = .5, max=.95)
runif(1, min = .5, max=.95)
runif(1, min = .5, max=.95)
runif(1, min = .5, max=.95)
runif(1, min = .5, max=.95)
runif(1, min = .5, max=.95)
runif(1, min = .5, max=.95)
runif(1, min = .5, max=.95)
# now lets use a loop to fill in these genomes
# at each site we will pick a random allele frequency for
# the common allele and assign genotypes assuming HW equilibrium
for(i in 1:4000){
p <- runif(1, min = .5, max=.95)
q <- 1-p
dat[, i] <- sample(1:3, size=200, replace=T, prob=c(p^2, 2*p*q, q^2))
}
View(dat)
# now lets imagine that we have a trait that is controlled
# by a gene(s) that includes 4 SNPs randomly chose from the genome
set.seed(1)
chosenSNPs <- sample(1:4000, 4)
# now lets imagine that we have a trait that is controlled
# by a gene(s) that includes 4 SNPs randomly chose from the genome
set.seed(1)
chosenSNPs <- sample(1:4000, 4)
# now we create our phenotype measured for each individual
# based on the genotype that they carry at the 4 loci chosen
y <- rnorm(200, mean=2*rowSums(dat[, chosenSNPs]-1), sd=1)
# here we will loop across the genome and preform a glm
# testing the genotypes as a predictor for the phenotype
# we are interested in.
for(i in 1:4000){
pvals[i] <- anova(lm(y ~ dat[,i]))$'Pr(>F)'[1]
}
# now lets see if we can recover this by running a GWAS
pvals <- c()
# here we will loop across the genome and preform a glm
# testing the genotypes as a predictor for the phenotype
# we are interested in.
for(i in 1:4000){
pvals[i] <- anova(lm(y ~ dat[,i]))$'Pr(>F)'[1]
}
# this shows us the distribution of p-values for
# all loci
hist(pvals)
# lets make a vector of colors that is red if the
# pvalue is less than 0.05 and black otherwise
cols <- rep("black", 4000)
cols[pvals < 0.05] <- "red"
plot(pvals, cex=.1, col=cols)
abline(h=.05, lty=2, col="blue")
sum(pvals<0.05)
# one of the characteristics of -logged values is that as the number
# goes to zero the -log of the number begins to increase disproportionately
logged <- -1*log(seq(from=0.0000001, to=1, length.out = 4000))
unlogged <- seq(from=0.0000001, to=1, length.out = 4000)
plot(logged~unlogged, xlim=c(0,.05))
# ok so lets look at the pvalues from our GWAS
plot(-1*log(pvals, base=10), cex=.1, ylab="-log10(pvalue)")
plot(pvals, cex=.1, col=cols)
# ok so lets look at the pvalues from our GWAS
plot(-1*log(pvals, base=10), cex=.1, ylab="-log10(pvalue)")
# lets plot red lines to find our SNPs that contribute to the phenotype
for(i in 1:4){
abline(v=chosenSNPs[i],col="red",lwd=.3)
}
# this is that arbitrary cutoff I mentioned
abline(h=-1*log(5*10^-8, base=10),lty=3)
which(pvals<5*10^-8)
chosenSNPs
# example of GWAS
# First lets think of what the data going into GWAS looks like
# you normally only analyze biallelic SNP data where the rare allele
# has a minimum frequency of 0.05. So a sample will
# essentially consist of 1, 2, 3 denoting if the genotype at a site
# is homozygous for common variant, heterozygous, or homozygous for
# the rare allele.
# lets create 200 toy genomes with 4,000 SNPs
dat <- matrix(NA, 200, 4000)
# now lets use a loop to fill in these genomes
# at each site we will pick a random allele frequency for
# the common allele and assign genotypes assuming HW equilibrium
for(i in 1:4000){
p <- runif(1, min = .5, max=.95)
q <- 1-p
dat[, i] <- sample(1:3, size=200, replace=T, prob=c(p^2, 2*p*q, q^2))
}
# now lets imagine that we have a trait that is controlled
# by a gene(s) that includes 4 SNPs randomly chose from the genome
chosenSNPs <- sample(1:4000, 4)
# now we create our phenotype measured for each individual
# based on the genotype that they carry at the 4 loci chosen
y <- rnorm(200, mean=2*rowSums(dat[, chosenSNPs]-1), sd=1)
#plot(y~dat[,2177])
# now lets see if we can recover this by running a GWAS
pvals <- c()
# here we will loop across the genome and preform a glm
# testing the genotypes as a predictor for the phenotype
# we are interested in.
for(i in 1:4000){
pvals[i] <- anova(lm(y ~ dat[,i]))$'Pr(>F)'[1]
}
par(mfcol=c(1,1))
# this shows us the distribution of p-values for
# all loci
hist(pvals)
# lets make a vector of colors that is red if the
# pvalue is less than 0.05 and black otherwise
cols <- rep("black", 4000)
cols[pvals < 0.05] <- "red"
plot(pvals, cex=.1, col=cols)
abline(h=.05, lty=2, col="blue")
sum(pvals<0.05)
# one of the characteristics of -logged values is that as the number
# goes to zero the -log of the number begins to increase disproportionately
logged <- -1*log(seq(from=0.0000001, to=1, length.out = 4000))
unlogged <- seq(from=0.0000001, to=1, length.out = 4000)
plot(logged~unlogged, xlim=c(0,.05))
# ok so lets look at the pvalues from our GWAS
plot(-1*log(pvals, base=10), cex=.1, ylab="-log10(pvalue)")
# lets plot red lines to find our SNPs that contribute to the phenotype
for(i in 1:4){
abline(v=chosenSNPs[i],col="red",lwd=.3)
}
# this is that arbitrary cutoff I mentioned
abline(h=-1*log(5*10^-8, base=10),lty=3)
which(pvals<5*10^-8)
chosenSNPs
table(dat[,3155])
setwd("~/Desktop")
# read in the data
dat <- read.csv("Schistocerca.csv")
# lets just look at SCUB
scub <- dat[dat$Species == "SCUB",]
View(scub)
View(scub)
scub
scubfemale
scub()
scub$Sex
scub$Sex == "female"
scub$Sex == "Female"
femdat <- scub[scub$Sex == "Female",]
View(femdat)
View(femdat)
View(femdat)
femdat$RearingCondition
femdat[femdat$RearingCondition == "Crowded",]
femdat$Pronotum
1:10
1:10[3]
(1:10)[3]
femdat$Pronotum[femdat$RearingCondition == "Crowded"]
ycrowded <- femdat$Pronotum[femdat$RearingCondition == "Crowded"]
yisolated <- femdat$Pronotum[femdat$RearingCondition == "Isolated"]
c(ycrowded, yisolated)
x = c(rep(.25, 23), rep(.75, 20))
plot(y = c(ycrowded, yisolated),
c(ycrowded, yisolated)
plot(y = c(ycrowded, yisolated),
x = c(rep(.25, 23), rep(.75, 20)))
plot(y = c(ycrowded, yisolated),
x = c(rep(.25, 23), rep(.75, 20)),
xlim=c(0,1))
plot(y = c(ycrowded, yisolated),
x = c(rep(.25, 23), rep(.75, 20)),
xlim=c(0,1),
xaxt="n")
plot(y = c(ycrowded, yisolated),
x = c(rep(.25, 23), rep(.75, 20)),
xlim=c(0,1),
xaxt="n", xlab="")
axis(side=1, at=c(.25,.75), labels=c("crowded","isolated"))
plot(y = c(ycrowded, yisolated),
x = c(rnorm(mean=.25, 23), rnorm(mean = .75, 20)),
xlim=c(0,1),
xaxt="n", xlab="")
plot(y = c(ycrowded, yisolated),
x = c(rnorm(mean=.25, sd=.1, 23), rnorm(mean = .75, sd=.1, 20)),
xlim=c(0,1),
xaxt="n", xlab="")
axis(side=1, at=c(.25,.75), labels=c("crowded","isolated"))
plot(y = c(ycrowded, yisolated),
x = c(rnorm(mean=.25, sd=.05, 23), rnorm(mean = .75, sd=.05, 20)),
xlim=c(0,1),
xaxt="n", xlab="")
axis(side=1, at=c(.25,.75), labels=c("crowded","isolated"))
plot(y = c(ycrowded, yisolated),
x = c(rnorm(mean=.25, sd=.02, 23), rnorm(mean = .75, sd=.02, 20)),
xlim=c(0,1),
xaxt="n", xlab="")
axis(side=1, at=c(.25,.75), labels=c("crowded","isolated"))
library(beeswarm)
install.packages("beeswarm")
library(beeswarm)
beeswarm(femdat$Pronotum~femdat$RearingCondition)
help("beeswarm")
beeswarm(femdat$Pronotum~femdat$RearingCondition,
method="hex")
beeswarm(femdat$Pronotum~femdat$RearingCondition,
method="swarm")
beeswarm(femdat$Pronotum~femdat$RearingCondition,
method="compactswarm")
beeswarm(femdat$Pronotum~femdat$RearingCondition,
method="center")
abline(v=1)
abline(v=2)
beeswarm(femdat$Pronotum~femdat$RearingCondition,
method="center")
help(lines)
lines(x=c(1,2), y=c(mean(ycrowded), mean(yisolated)))
lines(x=c(1,2), y=c(mean(ycrowded), mean(yisolated)), col="red",lwd=1.3)
beeswarm(femdat$Pronotum~femdat$RearingCondition,
method="center", xlab="")
beeswarm(femdat$Pronotum~femdat$RearingCondition,
method="center", xlab="", ylab="Pronotum (mm)")
lines(x=c(1,2), y=c(mean(ycrowded), mean(yisolated)), col="red",lwd=1.3)
setwd("~/Desktop")
dat <- read.csv("coleo.mcmc.log")
View(dat)
dat[1,]
colnames(dat) <- dat[1,]
View(dat)
dat <- dat[-1,]
View(dat)
dat[-,1]
dat <- dat[,-1]
View(dat)
dat <- read.csv("coleo.mcmc.log")
colnames(dat) <- dat[1,]
dat <- dat[-1,-1]
View(dat)
dat <- dat[-1,-1]
dat <- dat[-1,-1]
dat <- dat[-1,-1]
dat <- dat[-1,-1]
dat <- dat[-1,-1]
dat <- dat[-1,-1]
View(dat)
dat <- read.csv("coleo.mcmc.log")
colnames(dat) <- dat[1,]
dat <- dat[-1,-1]
View(dat)
View(dat)
View(dat)
plot(dat$likelihood,
type="l")
plot(dat$likelihood[-(1:100)],
type="l")
plot(dat$likelihood[-(1:100)],
type="l")
View(dat)
mean(dat$meanRate[899:998])
dat$meanRate[899:998]
mean(as.numeric(dat$meanRate[899:998]))
dat <- read.csv("coleo.mcmc.log", header = T)
View(dat)
dat <- read.csv("runstats.csv")
View(dat)
paste(c("ann","bob"), 1:2)
vals <- paste(dat$Animal, dat$Time_Point)
vals2 <- unique(paste(dat$Animal, dat$Time_Point))
length(vals2)
vals2[1]
vals2[1]
vals == vals2[1]
which(vals == vals2[1])
hit <- which(vals == vals2[1])
mean(hit)
View(dat)
colMeans(dat[hit,-(1:2)])
mean(c(1,NA,3))
mean(c(1,NA,3), na.rm = T)
setwd("~/Desktop/Dropbox/gitrepos/coleochroms/data.analysis/figures")
# Heath Blackmon
# 10 November
# This code makes the figure for the analysis of chromosome number in
# carabidae
library(coda)
library(ggplot2)
library(ggpubr)
library(viridis)
# this sets up a theme for ggplot
ggtheme <- theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border=element_blank(),
axis.line = element_line(colour="grey30"),
axis.title = element_text(colour="grey20"),
axis.text = (element_text(colour="grey30")),
legend.title = element_text(colour="grey20"),
legend.text = element_text(colour="grey30"))
dat <- read.csv("../results/wingless.chromeplus.csv")
dat <- dat[dat$type %in% c("fission","fusion"),]
hpd1 <- data.frame(X = c(HPDinterval(as.mcmc(dat$rate[dat$type=="fission"]))[1,],
HPDinterval(as.mcmc(dat$rate[dat$type=="fusion"]))[1,]),
Y = c(-1, -1, -2, -2),
types = rep(c("fission", "fusion"), each = 2))
# This reads in the data with polyploidy
dat2 <- read.csv("../results/wingless.wpoly.chromeplus.csv")
dat2 <- dat2[dat2$type %in% c("fission","fusion", "wgd"),]
hpd2 <- data.frame(X = c(HPDinterval(as.mcmc(dat2$rate[dat2$type=="fission"]))[1,],
HPDinterval(as.mcmc(dat2$rate[dat2$type=="fusion"]))[1,],
HPDinterval(as.mcmc(dat2$rate[dat2$type=="wgd"]))[1,]),
Y = c(-2, -2, -4, -4, -6, -6),
types = rep(c("fission", "fusion", "wgd"), each = 2))
m1 <- ggplot(dat, aes(x=rate)) +
geom_density(aes(fill=as.factor(type),y=..density..),
stat="density", position="identity", alpha=0.35) +
geom_line(data=hpd1, aes(x=X, y=Y, color=types),
alpha=0.45, size=1.4, lineend="round") +
geom_vline(xintercept=0, linetype="dashed", color="grey40") +
scale_fill_viridis_d(option="D", end=.6)+
scale_color_viridis_d(option="D", end=.6)+
guides(fill=guide_legend(title="parameter"),
color="none") +
xlab("Rate difference (per my)\n wingless-winged") +
ggtheme
m2 <- ggplot(dat2, aes(x=rate)) +
geom_density(aes(fill=as.factor(type),y=..density..),
stat="density", position="identity", alpha=0.35) +
geom_line(data=hpd2, aes(x=X, y=Y, color=types),
alpha=0.45, size=1.4, lineend="round") +
geom_vline(xintercept=0, linetype="dashed", color="grey40", size=.5) +
scale_fill_viridis_d(option="D", end=.9)+
scale_color_viridis_d(option="D",end=.9)+
guides(fill=guide_legend(title="parameter"),
color="none") +
xlab("Rate difference (per my)\n wingless-winged") +
ggtheme
ggarrange(m1,m2)
#attached libraries
library(ggplot2)
library(ggridges)
library(dplyr)
library(coda)
library(tidyr)
dat <- read.csv("../results/genera.chromeplus.csv", row.names = 1)
genera <- unique(dat$Genus)
dat$suborder[dat$Genus %in% genera[c(3,5,6,7,9,10,12)]] <- "Polyphaga"
dat$suborder[dat$Genus %in% genera[c(1,2,4,8,11)]] <- "Adephaga"
#add ne index variable
dat$expectedne[dat$Genus %in% genera[c(2,3,5,6,12)]] <- 1
dat$expectedne[dat$Genus %in% genera[c(11,10,9)]] <- 2
dat$expectedne[dat$Genus %in% genera[c(1,4,8,7)]] <- 3
#add ne index variable as factor
dat$indexgroup[dat$Genus %in% genera[c(2,3,5,6,12)]] <- "low"
dat$indexgroup[dat$Genus %in% genera[c(11,10,9)]] <- "medium"
dat$indexgroup[dat$Genus %in% genera[c(1,4,8,7)]] <- "high"
#order genera by expectedne
dat$Genus <- factor(dat$Genus, levels = unique(dat$Genus[order(dat$expectedne)]))
#make a polyphaga dataset
polyphaga <- dat[dat$suborder == "Polyphaga",]
#make adephaga dataset
adephaga <- dat[dat$suborder == "Adephaga",]
hpd_polyphaga <- polyphaga %>%
group_by_(.dots=c("Genus", "name")) %>%
mutate(ratemean = mean(value)) %>%
ungroup() %>%
group_by_(.dots=c("Genus", "name", "expectedne", "ratemean")) %>%
do(data.frame(HPDinterval(as.mcmc(.$value)))) %>%
mutate(inversehpdintervalsize = 1/(upper - lower))
combined_polyphaga <- polyphaga %>%
group_by_(.dots=c("Genus")) %>%
mutate(ratemean = mean(value)) %>%
ungroup() %>%
group_by_(.dots=c("Genus", "expectedne", "ratemean")) %>%
do(data.frame(HPDinterval(as.mcmc(.$value)))) %>%
mutate(inversehpdintervalsize = 1/(upper - lower))
poly_asc <- hpd_polyphaga[hpd_polyphaga$name=="asc1",]
poly_desc <- hpd_polyphaga[hpd_polyphaga$name=="desc1",]
poly_pol <- hpd_polyphaga[hpd_polyphaga$name=="pol1",]
poly_asc_mod1 <- lm(ratemean ~ expectedne, data = poly_asc, weights = inversehpdintervalsize)
summary(poly_asc_mod1)
poly_desc_mod1 <- lm(ratemean ~ expectedne, data = poly_desc, weights = inversehpdintervalsize)
summary(poly_desc_mod1)
poly_pol_mod1 <- lm(ratemean ~ expectedne, data = poly_pol, weights = inversehpdintervalsize)
summary(poly_pol_mod1)
poly_allrates_mod1 <- lm(ratemean ~ expectedne, data = combined_polyphaga, weights = inversehpdintervalsize)
summary(poly_allrates_mod1)
poly_scatter_figure <- ggplot(data = polyphaga, aes(x = expectedne, y = value, color = Genus)) +
geom_point(size = 0.2, position = position_jitterdodge(), alpha = 0.05) +
ylim(0,0.2) +
geom_point(data = combined_polyphaga, aes(x = expectedne, y = ratemean, fill = Genus), position = position_jitterdodge(jitter.width = 0), col = "black") +
geom_abline(slope = poly_allrates_mod1[[2]], intercept = coef(poly_allrates_mod1)[[1]])
geom_smooth(method = lm, col = 'red', size = 3)
ggplot(data = polyphaga, aes(x = expectedne, y = value, color = Genus)) +
geom_point(size = 0.2, position = position_jitterdodge(), alpha = 0.05) +
ylim(0,0.2) +
geom_point(data = combined_polyphaga, aes(x = expectedne, y = ratemean, fill = Genus), position = position_jitterdodge(jitter.width = 0), col = "black") +
geom_abline(slope = poly_allrates_mod1[[2]], intercept = coef(poly_allrates_mod1)[[1]])
#get maximum values for axis limits
dat %>%
group_by(suborder) %>%
summarize(max(value))
####Make polyphaga figures
#jitter
jitterfigure <- ggplot(polyphaga) +
geom_jitter(aes(Genus, value)) +
ylim(0,0.25)
jitterfigure
